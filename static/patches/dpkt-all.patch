Index: http.py
===================================================================
--- http.py	(revision 57)
+++ http.py	(working copy)
@@ -4,6 +4,7 @@
 
 import cStringIO
 import dpkt
+import gzip
 
 def parse_headers(f):
     """Return dict of HTTP headers parsed from a file object."""
@@ -55,6 +56,10 @@
     else:
         # XXX - need to handle HTTP/0.9
         body = ''
+
+    if headers.get('content-encoding', '').lower() == 'gzip':
+        body = gzip.Gzip(body).decompress()
+
     return body
 
 class Message(dpkt.Packet):
@@ -86,10 +91,10 @@
 
     def pack_hdr(self):
         return ''.join([ '%s: %s\r\n' % t for t in self.headers.iteritems() ])
-    
+
     def __len__(self):
         return len(str(self))
-    
+
     def __str__(self):
         return '%s\r\n%s' % (self.pack_hdr(), self.body)
 
@@ -114,6 +119,7 @@
         'BASELINE-CONTROL'
         ))
     __proto = 'HTTP'
+    __len = -1
 
     def unpack(self, buf):
         f = cStringIO.StringIO(buf)
@@ -126,7 +132,13 @@
         self.uri = l[1]
         self.version = l[2][len(self.__proto)+1:]
         Message.unpack(self, f.read())
+        self.__len = f.tell()
 
+    def __len__(self):
+        if len == -1:
+            return len(str(self))
+        return self.__len
+
     def __str__(self):
         return '%s %s %s/%s\r\n' % (self.method, self.uri, self.__proto,
                                     self.version) + Message.__str__(self)
@@ -139,7 +151,8 @@
         'reason':'OK'
         }
     __proto = 'HTTP'
-    
+    __len = 0
+
     def unpack(self, buf):
         f = cStringIO.StringIO(buf)
         line = f.readline()
@@ -150,7 +163,13 @@
         self.status = l[1]
         self.reason = l[2]
         Message.unpack(self, f.read())
+        self.__len = f.tell()
 
+    def __len__(self):
+        if len == -1:
+            return len(str(self))
+        return self.__len
+
     def __str__(self):
         return '%s/%s %s %s\r\n' % (self.__proto, self.version, self.status,
                                     self.reason) + Message.__str__(self)
Index: pcap.py
===================================================================
--- pcap.py	(revision 57)
+++ pcap.py	(working copy)
@@ -120,7 +120,7 @@
 
     def readpkts(self):
         return list(self)
-    
+
     def dispatch(self, cnt, callback, *args):
         if cnt > 0:
             for i in range(cnt):
@@ -132,13 +132,15 @@
 
     def loop(self, callback, *args):
         self.dispatch(0, callback, *args)
-    
+
     def __iter__(self):
         self.__f.seek(FileHdr.__hdr_len__)
         while 1:
             buf = self.__f.read(PktHdr.__hdr_len__)
             if not buf: break
             hdr = self.__ph(buf)
+            if hdr.caplen > self.__fh.snaplen:
+                raise Exception("Packet is bigger than snaplen (%d > %d)" % (hdr.caplen, self.__fh.snaplen))
             buf = self.__f.read(hdr.caplen)
             yield (hdr.tv_sec + (hdr.tv_usec / 1000000.0), buf)
 
