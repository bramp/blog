<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on bramp.net</title>
    <link>https://blog.bramp.net</link>
    <description>Recent content in Linux on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <lastBuildDate>Sun, 12 Sep 2021 13:09:07 -0700</lastBuildDate>
    <atom:link href="https://blog.bramp.net/tags/linux/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Recovering a RAID-5 Intel Storage Matrix on Linux (without the hardware)</title>
      <link>https://blog.bramp.net/post/2021/09/12/recovering-a-raid-5-intel-storage-matrix-on-linux-without-the-hardware/</link>
      <pubDate>Sun, 12 Sep 2021 13:09:07 -0700</pubDate>
      
      <guid>https://blog.bramp.net/post/2021/09/12/recovering-a-raid-5-intel-storage-matrix-on-linux-without-the-hardware/</guid>
      <description>&lt;p&gt;I recently found hard drives from an old RAID array I stopped using over a decade ago. I wanted to &lt;a href=&#34;https://raid.wiki.kernel.org/index.php/RAID_Recovery&#34;&gt;recover the data&lt;/a&gt; from these disks, and that turned out to be more challenging than expected. This post outlines the steps, and hopefully helps someone else in future.&lt;/p&gt;
&lt;p&gt;This was a four 750GB disk RAID-5 array using Intel Storage Matrix &amp;ldquo;fake-raid&amp;rdquo; (now called &lt;a href=&#34;https://en.wikipedia.org/wiki/Intel_Rapid_Storage_Technology&#34;&gt;Intel Rapid Storage Technology&lt;/a&gt;). This is a RAID solution that uses a mix of software and hardware. I no longer have this Intel hardware, and in fact I no longer have a machine that would accept four drives. Luckily &lt;code&gt;mdadm&lt;/code&gt; seems to have a pure software implementation of Intel Storage Matrix, so I hatched a plan. I would:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create disk images for each of the four drives,&lt;/li&gt;
&lt;li&gt;Mount the images locally as block devices,&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;mdadm&lt;/code&gt; to construct an array,&lt;/li&gt;
&lt;li&gt;Copy the data into my backups.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;1-create-disk-images&#34;&gt;1. Create disk images&lt;/h1&gt;
&lt;p&gt;I have a &lt;a href=&#34;https://www.google.com/search?q=usb+sata+adapter&#34;&gt;USB SATA adapter&lt;/a&gt;, and connected one drive at a time to my PC. This computer has a single local 12 TB drive, which I would store the disk images to. I start to create the disk images using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/sdc &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This worked great for the first disk, but the 2nd disk fail around the 600GB point. It seems this drive has developed bad blocks, but I kept my fingers crossed that this was still recoverable since this was RAID-5 after all. I switched up to using &lt;a href=&#34;https://www.gnu.org/software/ddrescue/&#34;&gt;&lt;code&gt;ddrescue&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo ddrescue /dev/sdc 2.raw 2.log --try-again --force --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This worked great, and was able to create a full 750GB image, slowly retiring the failed blocks, recovering as much as possible. After about a week of copying I had four disk images, &lt;code&gt;1.raw&lt;/code&gt;, &lt;code&gt;2.raw&lt;/code&gt;, &lt;code&gt;3.raw&lt;/code&gt;, &lt;code&gt;4.raw&lt;/code&gt;, with only the 2nd disk having problems.&lt;/p&gt;
&lt;p&gt;I now, &lt;code&gt;chmod -w *.raw&lt;/code&gt; to remove write permissions to the images, helping to prevent a future step accidently altered the images.&lt;/p&gt;
&lt;h1 id=&#34;2-mounting-the-images&#34;&gt;2. Mounting the images&lt;/h1&gt;
&lt;p&gt;To mount the images I use &lt;code&gt;losetup&lt;/code&gt; (roughly following instructions &lt;a href=&#34;https://askubuntu.com/questions/663027/create-raid-array-of-image-files&#34;&gt;here&lt;/a&gt;), specifically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo losetup -r /dev/loop31 1.raw
$ sudo losetup -r /dev/loop32 2.raw
$ sudo losetup -r /dev/loop33 3.raw
$ sudo losetup -r /dev/loop34 4.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Later I would use &lt;code&gt;sudo losetup -d /dev/loop3[1234]&lt;/code&gt; to unmount these images. I then decided to inspect these drives, to see what partitions were on them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo fdisk -l /dev/loop31

Disk /dev/loop31: 698.65 GiB, &lt;span class=&#34;m&#34;&gt;750156374016&lt;/span&gt; bytes, &lt;span class=&#34;m&#34;&gt;1465149168&lt;/span&gt; sectors
Units: sectors of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; * &lt;span class=&#34;nv&#34;&gt;512&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;logical/physical&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
Disklabel type: dos
Disk identifier: 0xd204616a

Device        Boot Start        End    Sectors Size Id Type
/dev/loop31p1          &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4294967295&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4294967295&lt;/span&gt;   2T ee GPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo fdisk -l /dev/loop32

Disk /dev/loop32: 698.65 GiB, &lt;span class=&#34;m&#34;&gt;750156374016&lt;/span&gt; bytes, &lt;span class=&#34;m&#34;&gt;1465149168&lt;/span&gt; sectors
Units: sectors of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; * &lt;span class=&#34;nv&#34;&gt;512&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;logical/physical&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo fdisk -l /dev/loop33

Disk /dev/loop33: 698.65 GiB, &lt;span class=&#34;m&#34;&gt;750156374016&lt;/span&gt; bytes, &lt;span class=&#34;m&#34;&gt;1465149168&lt;/span&gt; sectors
Units: sectors of &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; * &lt;span class=&#34;nv&#34;&gt;512&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
Sector size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;logical/physical&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
I/O size &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes / &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt; bytes
Disklabel type: dos
Disk identifier: 0x899c1289

Device        Boot      Start        End    Sectors   Size Id Type
/dev/loop33p1        &lt;span class=&#34;m&#34;&gt;33488921&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4294836216&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4261347296&lt;/span&gt;     2T ee GPT
/dev/loop33p2        &lt;span class=&#34;m&#34;&gt;35651584&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;35651584&lt;/span&gt;          &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     0B  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; Empty
/dev/loop33p3               &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1377535&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1377536&lt;/span&gt; 672.6M &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; Compaq diagnostics
/dev/loop33p4      &lt;span class=&#34;m&#34;&gt;3071040408&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3104693987&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;33653580&lt;/span&gt;    16G &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; Novell Netware &lt;span class=&#34;m&#34;&gt;286&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Disk 1 had a single partition, disk 2 and 4 had no partitions, and the 3rd disk had four! Those partitions looked a little weird, and I wondered for a minute if I mixed up my drives, or reformatted them at some point. I tried to mount them to no success, so I just assumed the RAID added something that looked like a real partition table. So I moved onto the next step.&lt;/p&gt;
&lt;h1 id=&#34;3-use-mdadm-to-construct-an-array&#34;&gt;3. Use &lt;code&gt;mdadm&lt;/code&gt; to construct an array.&lt;/h1&gt;
&lt;p&gt;This is where it got difficult, due to limitations of mounting local disks, and the Intel Storage Matrix support.&lt;/p&gt;
&lt;p&gt;I started by asking &lt;code&gt;mdadm&lt;/code&gt; to examine the images (telling it to use &lt;code&gt;imsm&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo mdadm --examine -e imsm /dev/loop31
mdadm: /dev/loop31 is not attached to Intel&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; RAID controller.
mdadm: Failed to retrieve serial &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; /dev/loop31
mdadm: Failed to load all information sections on /dev/loop31
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well that’s not a great start. If I understand the error &lt;code&gt;/dev/loop31 is not attached to Intel(R) RAID controller&lt;/code&gt; it implies I need to connect my drive (or in this case loopback disk image) via a real RAID controller. Well that defeats my whole plan. After some googling, I found this &lt;a href=&#34;https://askubuntu.com/questions/1239082/reassemble-intel-rst-raid-on-another-mainboard&#34;&gt;stackoverflow post&lt;/a&gt; pointing out there is a &lt;code&gt;IMSM_NO_PLATFORM=1&lt;/code&gt; environment various I could set. The messaging &lt;code&gt;is not attached to Intel(R) RAID controller&lt;/code&gt; was really a warning, and had no actual bearing on the problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo &lt;span class=&#34;nv&#34;&gt;IMSM_NO_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; mdadm --examine -e imsm &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  /dev/loop31 /dev/loop32 /dev/loop33 /dev/loop34
mdadm: no recogniseable superblock on /dev/loop34
mdadm: Cannot assemble mbr metadata on /dev/loop33
mdadm: no recogniseable superblock on /dev/loop32
mdadm: Cannot assemble mbr metadata on /dev/loop31
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A new set of errors, but they did not look promising. More head scratching, and I hit a bit of a dead end. I now wondered if the drives were corrupt, making the superblocks unreadable. I decided to start to read the source code for &lt;code&gt;mdadm&lt;/code&gt; to try and understand the superblock format, and see what was wrong.&lt;/p&gt;
&lt;p&gt;It indicated the &lt;a href=&#34;https://github.com/neilbrown/mdadm/blob/5f4184557a98bb641a7889e280265109c73e2f43/super-intel.c#L242&#34;&gt;superblock&lt;/a&gt; (the data structure containing information about the array) was two sectors from the end of the disk, starting with the string &lt;code&gt;Intel Raid ISM Cfg Sig. &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Guessing that a sector is 512 bytes long, I did the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ tail -c &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt; 3.raw  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; hd

&lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt; 6e &lt;span class=&#34;m&#34;&gt;74&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;65&lt;/span&gt; 6c &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;52&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;61&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;69&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; 4d &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;43&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;Intel Raid ISM C&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000010&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;67&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;69&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;67&lt;/span&gt; 2e &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 2e &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; 2e &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;fg&lt;/span&gt; Sig. 1.3.00..&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000020&lt;/span&gt;  cc c0 3d de &lt;span class=&#34;m&#34;&gt;48&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt; d5 &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; d4 &lt;span class=&#34;m&#34;&gt;09&lt;/span&gt; ae &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;..&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.H...@.......&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000030&lt;/span&gt;  f8 &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; a0  &lt;span class=&#34;m&#34;&gt;04&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000040&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt; d5 &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; d4 &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;@...............&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000050&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
*
000000d0  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt; 4a &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 4b &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;........S13UJ1KQ&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
000000e0  &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  f0 &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;403337...fTW....&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
000000f0  3a &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;:...............&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000100&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt; 4a &lt;span class=&#34;m&#34;&gt;44&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;........S13UJDWQ&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000110&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;35&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;37&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  f0 &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;346457...fTW....&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000120&lt;/span&gt;  3a &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;:...............&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000130&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt; 4a &lt;span class=&#34;m&#34;&gt;44&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;........S13UJDWQ&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000140&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;38&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  f0 &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;03&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;346668...fTW....&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000150&lt;/span&gt;  3a &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;:...............&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000160&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt; 4a &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; 4b &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;........S13UJ1KQ&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000170&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;34&lt;/span&gt; 3a &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;57&lt;/span&gt; ff ff ff ff  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;403324:0.fTW....&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000180&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000190&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;52&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;41&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;44&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;........RAID....&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
000001a0  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; f8 &lt;span class=&#34;nb&#34;&gt;fc&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;05&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
000001b0  8c &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
000001c0  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
*
000001e0  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  a6 a8 ae &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
000001f0  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;02&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; ff &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;00000200&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;00&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;................&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
*
&lt;span class=&#34;m&#34;&gt;00000400&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Boom, the super block was there, started with a valid header, and even had other fields that looked correct (e.g S13UJ1KQ being a serial number of the drive).&lt;/p&gt;
&lt;p&gt;Ok, so now I’m confused about what is wrong, and I wondered if this was a bug in &lt;code&gt;mdadm&lt;/code&gt;. Going back I remember the first error I got contained &lt;code&gt;Failed to retrieve serial&lt;/code&gt;, and I noticed the serial numbers were in the super block (e.g S13UJ1KQ). It then occurred to me, that once I imaged the hard drives, the images don’t contain the serial numbers!&lt;/p&gt;
&lt;p&gt;Inspecting the code some more, it would fail with that error if it was unable to read the drive’s serial number. The loopback device doesn’t support serial numbers, so this started to make sense. I did however found a undocumented environment variable &lt;code&gt;IMSM_DEVNAME_AS_SERIAL&lt;/code&gt;, which would instead of reading the serial number from the hardware, just use the name of the device as the serial (e.g &lt;code&gt;/dev/loop31&lt;/code&gt;). This feature seems explicitly designed to help testing the &lt;code&gt;mdadm&lt;/code&gt; codebase.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo &lt;span class=&#34;nv&#34;&gt;IMSM_DEVNAME_AS_SERIAL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;IMSM_NO_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; mdadm --examine -e imsm /dev/loop31 /dev/loop32 /dev/loop33 /dev/loop34
…
/dev/loop31:
          Magic : Intel Raid ISM Cfg Sig.
        Version : 1.3.00
    Orig Family : d411d540
         Family : d411d540
     Generation : 0019ae09
     Attributes : All supported
           UUID : ff44bc31:56060902:afb34379:b0faf183
       Checksum : de3dc0cc correct
    MPB Sectors : &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
          Disks : &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
   RAID Devices : &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;RAID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;:
           UUID : 676c222f:760eaf46:97bd30b8:989d2470
     RAID Level : &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
        Members : &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
          Slots : &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;UUU_&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
    Failed disk : &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
      This Slot : ?
    Sector Size : &lt;span class=&#34;m&#34;&gt;512&lt;/span&gt;
     Array Size : &lt;span class=&#34;m&#34;&gt;4395431936&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2095.91 GiB 2250.46 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   Per Dev Size : &lt;span class=&#34;m&#34;&gt;1465144328&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;698.64 GiB 750.15 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
  Sector Offset : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
    Num Stripes : &lt;span class=&#34;m&#34;&gt;11446438&lt;/span&gt;
     Chunk Size : &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; KiB
       Reserved : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Migrate State : idle
      Map State : degraded
    Dirty State : clean
     RWH Policy : off

  Disk00 Serial : S13UJ1KQ403337
          State : active
             Id : &lt;span class=&#34;m&#34;&gt;00010000&lt;/span&gt;
    Usable Size : &lt;span class=&#34;m&#34;&gt;1465138766&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;698.63 GiB 750.15 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

  Disk01 Serial : S13UJDWQ346457
          State : active
             Id : &lt;span class=&#34;m&#34;&gt;00020000&lt;/span&gt;
    Usable Size : &lt;span class=&#34;m&#34;&gt;1465138766&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;698.63 GiB 750.15 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

  Disk02 Serial : S13UJDWQ346668
          State : active
             Id : &lt;span class=&#34;m&#34;&gt;00030000&lt;/span&gt;
    Usable Size : &lt;span class=&#34;m&#34;&gt;1465138766&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;698.63 GiB 750.15 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

  Disk03 Serial : S13UJ1KQ403324:0
          State : active
             Id : ffffffff
    Usable Size : &lt;span class=&#34;m&#34;&gt;1465138526&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;698.63 GiB 750.15 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, slowly making progress! Now it lists all the superblock information, and I was happy to see &lt;code&gt;Checksum : de3dc0cc correct&lt;/code&gt;, etc. However, it listed &lt;code&gt;Failed disk : 3&lt;/code&gt;, and &lt;code&gt;This Slot : ?&lt;/code&gt;. It made me think without the valid serial numbers, it didn’t know which drive was which, and thus couldn’t assemble the array.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This made me ponder that if I was ever going to create a RAID array implementation, I would not make it depend on information from the hardware. How do folks re-image disks? What is wrong with some GUID in the superblock to identify the disk? Ok digression aside.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To move forward, I needed to trick &lt;code&gt;mdadm&lt;/code&gt; to think that serial &lt;code&gt;/dev/loop31&lt;/code&gt; was actually the real hardware. I went back to my drives, and visibility inspected them to check the serial numbers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Disk00 Serial : S13UJ1KQ403337   1.raw
  Disk01 Serial : S13UJDWQ346457   2.raw
  Disk02 Serial : S13UJDWQ346668   4.raw
  Disk03 Serial : S13UJ1KQ403324   3.raw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, I realised I had accidentally swapped drives 3 and 4. Quickly renaming them got them into the correct order.&lt;/p&gt;
&lt;p&gt;Since I had already looked over the mdadm source code, it seemed a simple clean codebase, so I decided to change it to accept serial numbers. After a little while I did the hackiest thing possible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gh&#34;&gt;diff --git a/super-intel.c b/super-intel.c
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;index da376251..d466d911 100644
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;--- a/super-intel.c
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ b/super-intel.c
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;@@ -3994,6 +3994,20 @@ static int nvme_get_serial(int fd, void *buf, size_t buf_len)
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;        if (!name)
                return 1;

&lt;span class=&#34;gi&#34;&gt;+       if (strcmp(name, &amp;#34;loop31&amp;#34;) == 0) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               strcpy((char *)buf, &amp;#34;S13UJ1KQ403337&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               return 0;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       } else if (strcmp(name, &amp;#34;loop32&amp;#34;) == 0) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               strcpy((char *)buf, &amp;#34;S13UJDWQ346457&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               return 0;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       } else if (strcmp(name, &amp;#34;loop33&amp;#34;) == 0) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               strcpy((char *)buf, &amp;#34;S13UJDWQ346668&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               return 0;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       } else if (strcmp(name, &amp;#34;loop34&amp;#34;) == 0) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               strcpy((char *)buf, &amp;#34;S13UJ1KQ403324&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+               return 0;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+       }
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;        if (strncmp(name, &amp;#34;nvme&amp;#34;, 4) != 0)
                return 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;nvme_get_serial&lt;/code&gt; function now had hard coded serial numbers when reading loop3[1234]. This obviously isn’t a generalised solution, but worked for me. Go open source!.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ make mdadm
…

$ sudo &lt;span class=&#34;nv&#34;&gt;IMSM_NO_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ./mdadm --examine -e imsm /dev/loop31 /dev/loop32 /dev/loop33 /dev/loop34
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examine looked good, so the moment of truth, let’s assemble.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo &lt;span class=&#34;nv&#34;&gt;IMSM_NO_PLATFORM&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; ./mdadm --assemble --readonly -e imsm /dev/md0 /dev/loop31 /dev/loop32 /dev/loop33 /dev/loop34
mdadm: Container /dev/md0 has been assembled with &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; drives
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok mixed success, it says 3 drives, but I would expect 4… But let’s keep going&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo ./mdadm --assemble --scan
mdadm: Started /dev/md/RAID_0 with &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; devices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;W00t! It Started without errors!&lt;/p&gt;
&lt;p&gt;I now have a &lt;code&gt;/dev/md0&lt;/code&gt;, &lt;code&gt;/dev/md127&lt;/code&gt; and &lt;code&gt;/dev/md127p1&lt;/code&gt; devices.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo mount -o ro /dev/md127p1 /mnt/raid5

$ ls /mnt/raid5
… lots of old files...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;YAY. Finished!&lt;/p&gt;
&lt;p&gt;Ok, I’m not sure why it says three drives not four.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo ./mdadm --detail /dev/md127
/dev/md127:
         Container : /dev/md0, member &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
        Raid Level : raid5
        Array Size : &lt;span class=&#34;m&#34;&gt;2197715968&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2.05 TiB 2.25 TB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
     Used Dev Size : &lt;span class=&#34;m&#34;&gt;732572032&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;698.64 GiB 750.15 GB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
      Raid Devices : &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
     Total Devices : &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;

             State : clean, degraded
    Active Devices : &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
   Working Devices : &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    Failed Devices : &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

            Layout : left-asymmetric
        Chunk Size : 64K

Consistency Policy : resync


              UUID : 676c222f:760eaf46:97bd30b8:989d2470
    Number   Major   Minor   RaidDevice State
       &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      active sync   /dev/loop31
       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;      active sync   /dev/loop32
       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;33&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;      active sync   /dev/loop33
       -       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;      removed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This does seem to imply a drive is missing. Maybe it doesn’t matter, as it mounted successfully, and I can copy all my data off the array.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This did not seem the easiest task, and there were a few road bumps along the way. Hopefully the hacks in here will help someone else out in a similar situation.&lt;/p&gt;
&lt;p&gt;To finally clean up, you can run this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo umount /mnt/raid5
$ sudo mdadm --stop /dev/md127
$ sudo mdadm --stop /dev/md0
$ sudo losetup -d /dev/loop3&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1234&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Certbot: Unexpected Error</title>
      <link>https://blog.bramp.net/post/2018/05/26/certbot-unexpected-error/</link>
      <pubDate>Sat, 26 May 2018 11:28:44 -0700</pubDate>
      
      <guid>https://blog.bramp.net/post/2018/05/26/certbot-unexpected-error/</guid>
      <description>&lt;p&gt;I got a &lt;a href=&#34;https://letsencrypt.org/docs/expiration-emails/&#34;&gt;nice warning email&lt;/a&gt; from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; that my cert was going to expire soon, and hadn&amp;rsquo;t been renewed. I found in  &lt;code&gt;/var/log/letsencrypt/letsencrypt.log&lt;/code&gt; the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Renewal configuration file /etc/letsencrypt/renewal/mydomain.bramp.net.conf (cert: mydomain.bramp.net) produced an unexpected error: &#39;Namespace&#39; object has no attribute &#39;dns_cloudflare_credentials&#39;. Skipping.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I manually ran certbot in dry-run mode and it worked fine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo certbot renew --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So this error only occurs when certbot is running as a cron job. Looking at &lt;code&gt;/etc/cron.d/certbot&lt;/code&gt; I see the user runs as root, so I tried the &lt;code&gt;certbot renew --dry-run&lt;/code&gt; again, but this time as the root user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo su
root@:~$ sudo certbot renew --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and bam, the same error. This error somehow related to the &lt;a href=&#34;https://certbot-dns-cloudflare.readthedocs.io/en/latest/&#34;&gt;certbot-dns-cloudflare plugin&lt;/a&gt;, which proves the ownership of the domain with a &lt;a href=&#34;https://acme-python.readthedocs.io/en/latest/api/challenges.html#acme.challenges.DNS01&#34;&gt;DNS01 challenge&lt;/a&gt; via Cloudflare&amp;rsquo;s DNS. I use this form of challenge, because the domain in question is internal and not available on the Internet.&lt;/p&gt;
&lt;p&gt;I had forgotten how I installed the plugin, but searching Google, it seems to be via &lt;code&gt;pip3&lt;/code&gt;. Clearly something was different between my root and normal user w/ sudo environments. So I did the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ sudo pip3 list &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep certbot
certbot &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.23.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
certbot-apache &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.23.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
certbot-dns-cloudflare &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.24.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

$ sudo su
root@:~$ pip3 list &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep certbot
certbot &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.23.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
certbot-apache &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.23.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Aha, no certbot-dns-cloudflare when running as root. Clearly I hadn&amp;rsquo;t installed this correctly. Running &lt;code&gt;pip3 install certbot-dns-cloudflare&lt;/code&gt; as root fixed the problem, and voila, certbot correctly fetches new certs via a regular cron.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pt-kill CentOS init.d script</title>
      <link>https://blog.bramp.net/post/2012/09/30/pt-kill-centos-init.d-script/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2012/09/30/pt-kill-centos-init.d-script/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.percona.com/doc/percona-toolkit/2.1/pt-kill.html&#34;&gt;pt-kill&lt;/a&gt; is a neat little application that can stop long running MySQL queries. It was formally know as &lt;a href=&#34;http://www.maatkit.org/doc/mk-kill.html&#34;&gt;mk-kill&lt;/a&gt; before &lt;a href=&#34;http://www.Percona.com&#34;&gt;Percona&lt;/a&gt; took over the project. Here is the init.d script I use (as one doesn’t seem provided by the project):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# pt-kill	This shell script takes care of starting and stopping&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#               the pt-kill services.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# chkconfig: - 60 20&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# description: pt-kill stops long running MySQL queries&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# probe: true&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Source function library.&lt;/span&gt;
. /etc/rc.d/init.d/functions

&lt;span class=&#34;nv&#34;&gt;RETVAL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# See how we were called.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; in
  start&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;$&amp;#34;Starting pt-kill: &amp;#34;&lt;/span&gt;
 
    pt-kill &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --pid /var/run/pt-kill.pid &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --daemonize &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --interval &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --busy-time &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --wait-after-kill &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --ignore-info &lt;span class=&#34;s1&#34;&gt;&amp;#39;(?i-smx:^insert|^update|^delete|^load)&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --match-info &lt;span class=&#34;s1&#34;&gt;&amp;#39;(?i-xsm:select)&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --ignore-user &lt;span class=&#34;s1&#34;&gt;&amp;#39;(?i-xsm:root)&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --log /var/log/mysql-kill.log &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --print &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --execute-command &lt;span class=&#34;s1&#34;&gt;&amp;#39;(echo &amp;#34;Subject: pt-kill query found on `hostname`&amp;#34;; tail -1 /var/log/mysql-kill.log)|/usr/sbin/sendmail -t you@example.com&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --kill-query
 
    &lt;span class=&#34;nv&#34;&gt;RETVAL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$RETVAL&lt;/span&gt; -ne &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#038;&amp;amp;#038; exit $RETVAL&lt;/span&gt;
 
  &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
  stop&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# Stop daemons.&lt;/span&gt;
       	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;$&amp;#34;Shutting down pt-kill: &amp;#34;&lt;/span&gt;
        killproc pt-kill
        &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
  restart&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt; stop
        &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt; start
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
  *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;$&amp;#34;Usage: pt-kill {start|stop}&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nv&#34;&gt;RETVAL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
 
&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$RETVAL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create the script as /etc/init.d/pt-kill, and change the pt-kill command in the middle of the script to suit your needs. Then run ‘chkconfig –level 345 pt-kill on’ to ensure this script starts up at boot. Alternatively test the script with ‘/etc/init.d/pt-kill start’ or ‘/etc/init.d/pt-kill stop’.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;http://www.mysqldiary.com/you-must-have-a-killer-in-your-system/&#34;&gt;MySQL Diary&lt;/a&gt; as they provided their default pt-kill command line. Perhaps in future someone could create a more generic startup script.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hacking Linksys E4200v2 firmware</title>
      <link>https://blog.bramp.net/post/2012/01/24/hacking-linksys-e4200v2-firmware/</link>
      <pubDate>Tue, 24 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2012/01/24/hacking-linksys-e4200v2-firmware/</guid>
      <description>&lt;p&gt;In a previous post I &lt;a href=&#34;https://blog.bramp.net/post/2012/01/22/obtaining-the-firmware-for-linksys-e4200v2/&#34;&gt;obtained the Linksys E4200v2 firmware&lt;/a&gt;, now I plan to break it apart and see what I can find.&lt;/p&gt;
&lt;p&gt;I start off by simplying using “file” on the firmware:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file FW_E4200_2.0.36.126507.SSA 

FW_E4200_2.0.36.126507.SSA: u-boot legacy uImage, Linux-2.6.35.8, Linux/ARM, OS Kernel Image &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Not compressed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;2677476&lt;/span&gt; bytes, Thu Dec &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 19:40:21 2011, Load Address: 0x00008000, Entry Point: 0x00008000, Header CRC: 0x6ADD9801, Data CRC: 0xB010442D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well this is a great start. We know we are dealing with Linux, and that this is a normal uImage. I then move on to use a neat little tool called &lt;a href=&#34;https://github.com/devttys0/binwalk&#34;&gt;binwalk&lt;/a&gt;. By using libmagic, binwalk tries to find interesting sections of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /usr/local/bin/binwalk FW_E4200_2.0.36.126507.SSA 

DECIMAL   	HEX       	DESCRIPTION
-------------------------------------------------------------------------------------------------------
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         	0x0       	uImage header, header size: &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; bytes, header CRC: 0x6ADD9801, created: Thu Dec &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 19:40:21 2011, image size: &lt;span class=&#34;m&#34;&gt;2677476&lt;/span&gt; bytes, Data Address: 0x8000, Entry Point: 0x8000, data CRC: 0xB010442D, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: none, image name: Linux-2.6.35.8
&lt;span class=&#34;m&#34;&gt;1124&lt;/span&gt;      	0x464     	LZMA compressed data, properties: 0x87, dictionary size: &lt;span class=&#34;m&#34;&gt;250216448&lt;/span&gt; bytes, uncompressed size: &lt;span class=&#34;m&#34;&gt;14786800&lt;/span&gt; bytes
&lt;span class=&#34;m&#34;&gt;16636&lt;/span&gt;     	0x40FC    	gzip compressed data, from Unix, last modified: Thu Dec &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 19:40:18 2011, max compression
&lt;span class=&#34;m&#34;&gt;2752512&lt;/span&gt;   	0x2A0000  	JFFS2 filesystem data little endian, JFFS node length: &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt;
..A whole lot of JFFS2 sections..
&lt;span class=&#34;m&#34;&gt;20974612&lt;/span&gt;  	0x1400C14 	JFFS2 filesystem data little endian, JFFS node length: &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;20974664&lt;/span&gt;  	0x1400C48 	JFFS2 filesystem data little endian, JFFS node length: &lt;span class=&#34;m&#34;&gt;193&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We find a small LZMA section, and large gzip section, and lots of JFFS2 sections. JFFS2 is a popular embedded file system, so we can guess the bulk of the file system is here. Next we can extract each section using dd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1124&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15512&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FW_E4200_2.0.36.126507.SSA &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-1.lzma
dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16636&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2735876&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FW_E4200_2.0.36.126507.SSA &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-2.gz
dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2752512&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FW_E4200_2.0.36.126507.SSA &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-3.jffs2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we are using a block size of 1 (so we can count in bytes), and we skip the offset into the file. Then we manually work out the sizes for the lzma and gzip sections. They can be no larger than their start until the next section. If they don’t fill that full space, then not to worry as these tools will normally ignore trailing data.&lt;/p&gt;
&lt;p&gt;As I’m interested to see what’s in the JFFS filesystem, we should mount it. You can’t mount JFFS like a normal loopback device, you have to create a fake flash device. The following set of command can solve that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo modprobe mtdram &lt;span class=&#34;nv&#34;&gt;total_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;32768&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;erase_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt;
sudo modprobe mtdblock
sudo modprobe mtdchar
&lt;span class=&#34;c1&#34;&gt;# sudo mknod /dev/mtdblock0 b 31 0&lt;/span&gt;
dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-3.jffs2 &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/mtdblock0
mount -t jffs2 /dev/mtdblock0 /mnt/disk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The mknod line is only needed if you don’t already have a /dev/mtdblock0. Also a /mnt/disk needs to be created ahead of time so the mounting works. Anyway once that was done, I cd /mnt/disk and found that it does appear to contain most of the file system. There are all the HTML pages, and binaries (for example busybox).&lt;/p&gt;
&lt;p&gt;Now we should go back to image-1.lzma and image-2.gz. Well straight away trying to decompress image-1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ lzma -dc image-1.lzma &amp;gt; image-1
lzma: Decoder error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;results in a error. So we can assume that was a incorrectly detected by binwalk. Lets now try and decompress image-2.gz:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gzip -dc image-2.gz &amp;gt; image-2
gzip: image-2.gz: decompression OK, trailing garbage ignored
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that does indeed produce a large image-2 file, so we can ignore the trailing garbage warning. A quick “file” on image-2 doesn’t reveal anything useful, so I run binwalk on it. This turns up a set of false positives. So I take a different approach. I run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ strings image-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This produces a whole host of valid looking strings. From the contents of the strings it makes me think it’s the actual kernel. A line like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Linux version 2.6.35.8 (root@ubuntu) (gcc version 4.2.0 20070413 (prerelease) (CodeSourcery Sourcery G++ Lite 2007q1-21)) #1 Thu Dec 22 16:40:10 PST 2011
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;helps me come to that conclusion.&lt;/p&gt;
&lt;p&gt;I haven’t finished poking around image-2.gz, but I suspect the interesting parts are mostly in the JFFS2 filesystem. Hopefully this will lead to me getting ssh access to the router, and eventually being able to customise the firmware.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Obtaining the firmware for Linksys E4200v2</title>
      <link>https://blog.bramp.net/post/2012/01/22/obtaining-the-firmware-for-linksys-e4200v2/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2012/01/22/obtaining-the-firmware-for-linksys-e4200v2/</guid>
      <description>&lt;p&gt;I recently got a Linksys E4200v2 wireless router. It’s pretty cool, supports IPv6, 2.4Ghz and 5Ghz wifi networks, VPN, etc. The one downside is that the firmware for the router is not available from &lt;a href=&#34;http://homesupport.cisco.com/en-us/wireless/linksys/E4200&#34;&gt;Linksys’s website&lt;/a&gt;, and the &lt;a href=&#34;http://homesupport.cisco.com/en-us/gplcodecenter&#34;&gt;GPL code&lt;/a&gt; has not been made available, yet… However, the router has been able to pull updates itself from the Internet.&lt;/p&gt;
&lt;p&gt;So I wanted to acquire the firmware to see if I could do something fun with the router. I set about to figure out how the router does this. My plan was to set my laptop up between Internet interface on the router, and the cable modem. Since my laptop doesn’t have two network cards, I plugged into a switch and used &lt;a href=&#34;http://ettercap.sourceforge.net/&#34;&gt;Ethercap&lt;/a&gt; to ARP poison to redirect traffic via the laptop.&lt;/p&gt;
&lt;p&gt;Then using &lt;a href=&#34;http://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; I could see the traffic coming out of the router. All I needed to do now was to hit the “check for updates button”.&lt;/p&gt;
&lt;p&gt;Firstly I saw two DNS requests, one for the AAAA (IPv6) record for update.linksys.com, then a A request for update.linksys.com. Clearly the updates are coming from there. Secondly I saw a HTTPS connection form to that domain. That makes this a little more complex, as I am unable to see the encrypted traffic, and thus see what is being transferred.&lt;/p&gt;
&lt;p&gt;So, I grabbed a &lt;a href=&#34;http://code.activestate.com/recipes/491264-mini-fake-dns-server/&#34;&gt;simple DNS server&lt;/a&gt;, and set up a simple SSL server following &lt;a href=&#34;http://wirewatcher.wordpress.com/2010/07/20/decrypting-ssl-traffic-with-wireshark-and-ways-to-prevent-it/&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now with DNS spoofing, and a fake SSL server, I could intercept encrypted traffic from the router, as long as it does not validate the SSL certificate. Luckily it didn’t check the validity, and thus I was able to capture the request: (BTW Not checking the cert completely defeats the point of using SSL… bad Linksys!).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;/cds/update&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;update.linksys.com&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;*/*&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/xml&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;573&lt;/span&gt;

&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
  &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;SOAP-ENV:Header/&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
  &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;SOAP-ENV:Body&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:GetFirmwareFromDeviceRequest xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:LanguageCode&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;en&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:LanguageCode&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:CountryCode&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;us&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:CountryCode&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:MacAddress&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;12:34:56:78:90:ab&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:MacAddress&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:ModelNo&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;E4200&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:ModelNo&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:HardwareVersion&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;2&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:HardwareVersion&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:CurrentFirmwareVersion&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;2.0.36.126507&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:CurrentFirmwareVersion&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:GetFirmwareFromDeviceRequest&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
  &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/SOAP-ENV:Body&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/SOAP-ENV:Envelope&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and the response:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;OK&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;en-US&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/xml&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SOAPAction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;soapenv:Envelope
 xmlns:soapenv=&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;
 xmlns:soapenc=&amp;#34;http://schemas.xmlsoap.org/soap/encoding/&amp;#34;
 xmlns:xsd=&amp;#34;http://www.w3.org/2001/XMLSchema&amp;#34;
 xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
  &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;soapenv:Header/&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
  &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;soapenv:Body&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:GetFirmwareFromDeviceResponse xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:FirmwareList xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:Firmware xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
          &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:Version xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;2.0.36.126507&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:Version&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
          &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:Revision xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;D&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:Revision&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
          &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:ReleaseDate xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;2012-01-06T16:48:08Z&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:ReleaseDate&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
          &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:DownloadURI xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;http://download.linksys.com/updates/to0037258865.pdx/FW_E4200_2.0.36.126507.SSA&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:DownloadURI&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
          &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:DateFormat xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;yyyy-MM-dd&amp;#39;;T&amp;#39;;HH:mm:ss&amp;#39;;Z&amp;#39;;&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:DateFormat&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
          &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;ns:Checksum xmlns:ns=&amp;#34;http://cisco.com/schemas&amp;#34;&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;1958710861&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:Checksum&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
        &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:Firmware&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
      &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:FirmwareList&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/ns:GetFirmwareFromDeviceResponse&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
  &lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/soapenv:Body&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class=&#34;ni&#34;&gt;&amp;amp;lt;&lt;/span&gt;/soapenv:Envelope&lt;span class=&#34;ni&#34;&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(I slightly modified portions of the request and response to hide the identify of my router.).&lt;/p&gt;
&lt;p&gt;I might write a script to make fake requests, but until then you can easily create a request with curl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -d @request.raw https://update.linksys.com/cds/update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you just extract the DownloadURI and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl http://download.linksys.com/updates/to0037258865.pdx/FW_E4200_2.0.36.126507.SSA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Voila I now have the firmware. Now I need to figure out what to do with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As requested I fetched the more recent version of the file:&lt;br&gt;
2.0.37.131047 – &lt;a href=&#34;http://download.linksys.com/updates/to0040829450.pdx/FW&#34;&gt;http://download.linksys.com/updates/to0040829450.pdx/FW&lt;/a&gt;_E4200_2.0.37.131047.SSA&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building PHP’s Debian package nightmare</title>
      <link>https://blog.bramp.net/post/2011/11/22/building-phps-debian-package-nightmare/</link>
      <pubDate>Tue, 22 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2011/11/22/building-phps-debian-package-nightmare/</guid>
      <description>&lt;p&gt;I just tried to compile the Debian PHP packages, so I could make some &lt;a href=&#34;http://www.howtoforge.com/recompiling-php5-with-bundled-support-for-gd-on-ubuntu&#34;&gt;minor tweaks&lt;/a&gt; to the source, to fix a bug I’m hopefully going to document shortly. This turned out to be very problematic, mainly due to the testing phase!&lt;/p&gt;
&lt;p&gt;To build the Debian packages you typically do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir php
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; php
apt-get &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; php5
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; php5-*
debuild -us -uc -j4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While testing, the debian/setup_mysql.sh script is called, to create a temporary MySQL database. This however failed to execute correctly because I had some custom options in my &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.1/en/option-files.html&#34;&gt;~/.my.cnf&lt;/a&gt;. Thus it failed like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# start our own mysql server for the tests&lt;/span&gt;
/bin/sh debian/setup-mysql.sh &lt;span class=&#34;m&#34;&gt;1029&lt;/span&gt; /home/bramp/vendor/php/php5-5.3.8.0/mysql_db
mysqladmin: connect to server at &lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; failed
error: &lt;span class=&#34;s1&#34;&gt;&amp;#39;Access denied for user &amp;#39;&lt;/span&gt;root&lt;span class=&#34;s1&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;localhost&lt;span class=&#34;s1&#34;&gt;&amp;#39; (using password: YES)&amp;#39;&lt;/span&gt;
make: *** &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;test-results.txt&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Error &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
dpkg-buildpackage: error: debian/rules build gave error &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; status &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
debuild: fatal error at line 1348:
dpkg-buildpackage -rfakeroot -D -us -uc -j8 failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After removing the my.cnf things were ok. The below patch fixes it in a more general way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gd&#34;&gt;-- debian/setup-mysql.sh.org	2011-11-21 21:57:07.244481175 -0500
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ debian/setup-mysql.sh	2011-11-21 21:40:39.384455880 -0500
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;@@ -16,7 +16,7 @@
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt; 
 socket=$datadir/mysql.sock
 # Commands:
&lt;span class=&#34;gd&#34;&gt;-mysqladmin=&amp;#34;mysqladmin -u root -P $port -h localhost --socket=$socket&amp;#34;
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+mysqladmin=&amp;#34;mysqladmin --no-defaults -u root -P $port -h localhost --socket=$socket&amp;#34;
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; mysqld=&amp;#34;/usr/sbin/mysqld --no-defaults --bind-address=localhost --port=$port --socket=$socket --datadir=$datadir&amp;#34;
 
 # Main code #
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next problem I encountered is that all the automated PHP unit tests were failing, and they would eventually get stuck and use all my RAM and swap space (at least 16GiB of it) :( I’m not sure what made the machine run out of RAM, but the tests were failing because the version of PHP that was running the tests was incorrectly loading extensions from my system. The quick fix for this was to disable any extensions I had installed to my system. I just&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo mv /etc/php5/conf.d /etc/php5/conf.d.tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to do that.&lt;/p&gt;
&lt;p&gt;This made me think that in future I should perhaps find a cleaner environment to build these packages. In fact, it makes me wonder if the builds are just broken if my environment clearly impacts the successful run of tests.&lt;/p&gt;
&lt;p&gt;One trick I found while building again and again, is that you can pass “-nc” to debuild so that it does not clean, and thus reuses the existing build materials for a faster build. Either way, I now have my own version of PHP built and installed! Next time I might just ignore the .deb files and build direct from source.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Default to curses interface for mtr</title>
      <link>https://blog.bramp.net/post/2011/08/07/default-to-curses-interface-for-mtr/</link>
      <pubDate>Sun, 07 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2011/08/07/default-to-curses-interface-for-mtr/</guid>
      <description>&lt;p&gt;I really like &lt;a href=&#34;http://www.bitwizard.nl/mtr/&#34;&gt;mtr&lt;/a&gt; (the traceroute tool), however, it always bugged me that it launches a GUI app instead of using the &lt;a href=&#34;http://en.wikipedia.org/wiki/Curses_(programming_library)&#34;&gt;curses&lt;/a&gt; interface. You can easily pass the “-t” or “–curses” flag to default to the curses interface, but I always forget.&lt;/p&gt;
&lt;p&gt;So today I set about writing a patch for mtr to read a environment varable to force the curses interface. While I was reading the source I noticed there was already a simple undocumented way!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;MTR_OPTIONS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Voila the curses interface is now used by default. This is certainly going into my ~/.bashrc&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux 64bit Flash glibc memcpy bug</title>
      <link>https://blog.bramp.net/post/2011/06/19/linux-64bit-flash-glibc-memcpy-bug/</link>
      <pubDate>Sun, 19 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2011/06/19/linux-64bit-flash-glibc-memcpy-bug/</guid>
      <description>&lt;p&gt;Does your Linux 64bit version of Flash now make anonying beeping/distortion noises while playing videos? Well it turns out a recent “&lt;a href=&#34;http://lwn.net/Articles/414467/&#34;&gt;improvement&lt;/a&gt;” to glibc has caused some programs to now crash or do weird things. This is to do with an improvement of &lt;a href=&#34;http://linux.die.net/man/3/memcpy&#34;&gt;memcpy&lt;/a&gt;, which makes its use more strict, causing those applications that incorrectly used it to now crash.&lt;/p&gt;
&lt;p&gt;On Debian, there is a simple a fix that allows you to use the original memcpy. You can load the application using an additional .so file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LD_PRELOAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/lib/libc/memcpy-preload.so /path/to/your/program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As I use Google Chrome when using Flash I had to do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LD_PRELOAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/lib/libc/memcpy-preload.so /usr/bin/google-chrome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but if you want to fix chrome on a system level, you can edit the Chrome Wrapper used to launch it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo nano /opt/google/chrome/google-chrome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;add the following line&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LD_PRELOAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/lib/libc/memcpy-preload.so&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;for example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; LD_LIBRARY_PATH
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;LD_PRELOAD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/lib/libc/memcpy-preload.so&amp;#34;&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CHROME_VERSION_EXTRA&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;beta&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Intel ucode firmware version parser</title>
      <link>https://blog.bramp.net/post/2011/01/24/intel-ucode-firmware-version-parser/</link>
      <pubDate>Mon, 24 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2011/01/24/intel-ucode-firmware-version-parser/</guid>
      <description>&lt;p&gt;Out of fun I wrote a simple Python script to pull the version number out of Intel’s ucode firmware, for example, the firmware used by my wifi driver. I needed this so I could see what version I was running versus a new version I had downloaded from &lt;a href=&#34;http://intellinuxwireless.org/?n=Downloads&#34;&gt;Intel’s Linux Wireless site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here is the code if anyone finds it interesting:&lt;/p&gt;
&lt;p&gt;and example of using it is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./ucode.py /lib/firmware/*.ucode
iwlwifi-1000-3.ucode    : ver 128.50.3.1
iwlwifi-3945-1.ucode    : ver 15.28.1.6
iwlwifi-3945-2.ucode    : ver 15.32.2.9
iwlwifi-4965-1.ucode    : ver 228.57.1.21
iwlwifi-4965-2.ucode    : ver 228.61.2.24
iwlwifi-5000-1.ucode    : ver 5.4.1.16
iwlwifi-5000-2.ucode    : ver 8.24.2.12
iwlwifi-5150-2.ucode    : ver 8.24.2.2
iwlwifi-6000-4.ucode    : ver 9.221.4.1
iwlwifi-6000g2a-5.ucode : ver 17.168.5.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6000g2a fw v17.168.5.1 build 33993&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
iwlwifi-6000g2b-5.ucode : ver 17.168.5.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;6000g2b fw v17.168.5.1 build 33993&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
iwlwifi-6050-4.ucode    : ver 9.201.4.1
iwlwifi-6050-5.ucode    : ver 41.28.5.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6050&lt;/span&gt; fw v41.28.5.1 build 33926&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ifconfig stats gotcha</title>
      <link>https://blog.bramp.net/post/2010/09/06/ifconfig-stats-gotcha/</link>
      <pubDate>Mon, 06 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/09/06/ifconfig-stats-gotcha/</guid>
      <description>&lt;p&gt;I’ve recently been running network benchmarks and I wanted to highlight a quick gotcha that caught me out. My benchmark script would run ifconfig before and after the experiment and record the number of packets sent and received. The same would be recorded on another machine which was generating the packets.&lt;/p&gt;
&lt;p&gt;I started to notice a problem that more packets were being received than being sent. It was only a small number, but nevertheless an seemingly impossible situation to have occurred. I tracked the problem down to the fact that the network card driver did not always report accurate and up to date stats. In fact, after checking the source, the e1000, ixgb, ixgbe and most likely the other Intel drivers all refresh their stats every 2 seconds. The other NIC I was using, an embedded smsc9500, always updated its stats in realtime.&lt;/p&gt;
&lt;p&gt;Delaying the update of stats is obviously a performance optimisation, which no doubt avoids costly locking, or problems such as cache line bouncing. I did some searching and other people have noticed similar delays in other networking devices, in some cases as much as 30 seconds on &lt;a href=&#34;http://fixunix.com/snmp/443079-how-handle-interface-counter-update-delay.html&#34;&gt;cisco routers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From now on I will always pause my scripts for a few seconds to allow the ifconfig stats to catch up before I record my data. An alternative would be to hack the drivers to either stay up to date, or offer a API that forces a update.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Persec python script</title>
      <link>https://blog.bramp.net/post/2010/08/31/persec-python-script/</link>
      <pubDate>Tue, 31 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/08/31/persec-python-script/</guid>
      <description>&lt;p&gt;A while ago I wrote a python script that does a similar job to GNU’s &lt;a href=&#34;http://linux.die.net/man/1/watch&#34;&gt;watch&lt;/a&gt; command. You use it like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./persec.py &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;--interval&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;lt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;n&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;lt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;command&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;so for example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./persec.py ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now in a similar way to watch, it executes the command every second, and highlights the differences between each execution. However, in addition to this it finds any numbers that have changed and works out the rate at which they are changing. So for example, ifconfig would typically output this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;usb0      Link encap:Ethernet  HWaddr 02:04:4b:00:d3:cf
          inet addr:10.0.0.2  Bcast:10.0.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1017422291 errors:0 dropped:0 overruns:0 frame:0
          TX packets:549382406 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1910704266 (1.9 GB)  TX bytes:1834667124 (1.8 GB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but now outputs something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;usb0      Link encap:Ethernet  HWaddr 02:04:4b:00:d3:cf
          inet addr:10.0.0.2  Bcast:10.0.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:&amp;lt;b&amp;gt;2001/s&amp;lt;/b&amp;gt; errors:0 dropped:0 overruns:0 frame:0
          TX packets:&amp;lt;b&amp;gt;2002/s&amp;lt;/b&amp;gt; errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:&amp;lt;b&amp;gt;168120/s&amp;lt;/b&amp;gt; (1.9 GB)  TX bytes:&amp;lt;b&amp;gt;217144/s&amp;lt;/b&amp;gt; (1.8 GB)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the per second (/s) values for RX/TX packets and RX/TX bytes. I have found this quite useful many times in the past, on commands such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./persec.py cat /proc/interrupts
./persec.py df
./persec.py ls -l somefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bramp/handy-tools/master/persec.py&#34;&gt;Download version 1.1&lt;/a&gt; or &lt;a href=&#34;https://github.com/bramp/handy-tools/blob/master/persec.py&#34;&gt;View on Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Humble Indie Bundle md5sums</title>
      <link>https://blog.bramp.net/post/2010/05/07/humble-indie-bundle-md5sums/</link>
      <pubDate>Fri, 07 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/05/07/humble-indie-bundle-md5sums/</guid>
      <description>&lt;p&gt;I just purchased the &lt;a href=&#34;http://www.wolfire.com/humble&#34;&gt;Humble Indie Bundle&lt;/a&gt;, 5 games which run on Windows, Linux and Mac. They kindly offered md5 hashes, however they weren’t in a convenient format, so I created a md5sums file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;187287db6226ef6a306a4cd0cfa8dd45 *Aquaria111.2008.12.12.exe
8b24ddeeb553e028bbd501102f891cc2 *aquaria-lnx-humble-bundle.mojo.run
336d89eb431e0b00535a2b50146c579d *WorldOfGooSetup.1.30.exe
f5afa40893d0fbcc37885191404f6d8c *WorldOfGooSetup.1.41.tar.gz
b373132f6e78665f1076752b038a8218 *gish153-1.tar.gz
94e82d53e2104914f19ec97f7cf5da42 *gish1531.zip
41ea2e41fe42c40b5ad017ae1afb45c7 *lugaru-full-linux-x86-1.0c.bin
d40d4076ed3ffa2a9bc9913202c55a06 *lugaru-windows.zip
56060bb550e0cd7e90bc7bc60d7c4c23 *penumbra_overture_1.1.exe
539567b590cf53e65a8e8f1b2bc728b3 *penumbra_overture_1.1.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and for those that prefer sha1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;ec8fd66bb44c6f67eab40f73e57838dcb5e2f4dd *Aquaria111.2008.12.12.exe
48267967b3a57fb406fa6545261f8b758edb8fb5 *aquaria-lnx-humble-bundle.mojo.run
70fad514746d6fc482fc3d681a7e9d498374bdad *WorldOfGooSetup.1.30.exe
4f7202a4ac17dd1665a1ab7f90153e5b813e16f1 *WorldOfGooSetup.1.41.tar.gz
27b862939b6a01c29b1b146ed1307c0027217855 *gish153-1.tar.gz
7a1341822d4d4e0010cc1e8cce68da6bb02ea904 *gish1531.zip
2349bdea3d595c3aaedca0810229d12f96323874 *lugaru-full-linux-x86-1.0c.bin
73f09414e0cabd371802eea1b9c75c76522c5934 *lugaru-windows.zip
557c6988eda16c6269d09a35031fd1754e042c02 *penumbra_overture_1.1.exe
e115f7cfcf9710d7aa5b2a5a9186b3736bb55cf2 *penumbra_overture_1.1.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note, these were correct and validated on the 8th of May, however, if any of the files have been updated the hashes might no longer much. Feel free to &lt;a href=&#34;https://blog.bramp.net/about-me/&#34;&gt;contact me&lt;/a&gt; to tell me if this happens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VMWare breaks shift key</title>
      <link>https://blog.bramp.net/post/2010/03/19/vmware-breaks-shift-key/</link>
      <pubDate>Fri, 19 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/03/19/vmware-breaks-shift-key/</guid>
      <description>&lt;p&gt;I came into my office today to find that my keyboard would no longer type capital letters. The shift, caps lock, and even num lock keys seemed to be broken. After a quick WTF &lt;a href=&#34;http://www.evolution-systems.co.uk/blogs/matt/view_post&amp;amp;id=37/&#34;&gt;it was pointed out to me&lt;/a&gt; that VMWare occasionally does this to Linux machines. Thanks to &lt;a href=&#34;http://twitter.com/bigkebabman&#34;&gt;Matt&lt;/a&gt; who showed me a quick solution. In a terminal just type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;setxkbmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And everything should be back to normal. After using VMWare on Linux for a couple of years I’ve never encountered this problem!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redirect local traffic to a web cache with iptables</title>
      <link>https://blog.bramp.net/post/2010/01/26/redirect-local-traffic-to-a-web-cache-with-iptables/</link>
      <pubDate>Tue, 26 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/01/26/redirect-local-traffic-to-a-web-cache-with-iptables/</guid>
      <description>&lt;p&gt;Very occasionally I come across a Linux application that does not respect the http_proxy variable. This stops the application from working while I’m at university as they forbid traffic on port 80 unless it goes via their webcache. So today I came up with a hack of a solution that involves iptables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# IP address and port number of the webcache&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;WEBCACHE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;194.80.32.10:8080

&lt;span class=&#34;c1&#34;&gt;# Flush any previous rules&lt;/span&gt;
iptables -t nat --flush

&lt;span class=&#34;c1&#34;&gt;# Delete and recreate the chain&lt;/span&gt;
iptables -t nat -X HTTPFORCE
iptables -t nat -N HTTPFORCE

&lt;span class=&#34;c1&#34;&gt;# Don&amp;#39;t touch local traffic (localhost and internal network)&lt;/span&gt;
iptables -t nat -A HTTPFORCE -o lo -j RETURN
iptables -t nat -A HTTPFORCE --dst 127.0.0.1/8 -j RETURN
iptables -t nat -A HTTPFORCE --dst 10.0.0.0/8 -j RETURN
&lt;span class=&#34;c1&#34;&gt;# Add any other local networks here.&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Now we have two options. Please uncomment out one of them&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 1) Redirect packets on port 80 to the webcache&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#    This may not work unless the webcache is generous with its input&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#iptables -t nat -A HTTPFORCE -p tcp --dport 80 -j DNAT --to $WEBCACHE&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 2) Redirect packets on port 80 to localhost port 1234&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#    On port 1234 you need to run a local web proxy, which forwards &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#    requests to the real webcache&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#iptables -t nat -A HTTPFORCE -p tcp --dport 80 -j REDIRECT --to-port 1234&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Capture all outgoing TCP syns&lt;/span&gt;
iptables -t nat -A OUTPUT -p tcp --syn -j HTTPFORCE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All outgoing TCP packets on port 80 which are not destined for a local network are captured and changed in one of two ways. The first option just manipulates the IP/TCP header, and the second redirects the traffic to a proxy running on localhost. The reason for the two options was that my university’s webcache seemed unable to deal with HTTP requests without the full URL in the GET line, even though the request contains a valid Host header. I think this is a misconfiguration of their squid proxy, so instead you can redirect to a local proxy which forwards the request on to the webcache.&lt;/p&gt;
&lt;p&gt;This all seems a hassle but sometimes it is needed when a application does not respect the http_proxy environment. On a good note all libcurl applications should respect it by default.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing packages into your user directory</title>
      <link>https://blog.bramp.net/post/2010/01/14/installing-packages-into-your-user-directory/</link>
      <pubDate>Thu, 14 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/01/14/installing-packages-into-your-user-directory/</guid>
      <description>&lt;p&gt;Today I had the need to install some &lt;a href=&#34;http://www.freebsd.org/&#34;&gt;FreeBSD&lt;/a&gt; and &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; packages inside my home directory because I did not have root permissions to install them.&lt;/p&gt;
&lt;p&gt;It was quite simple to install the packages on FreeBSD&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pkg_add -rRP /home/bramp nano
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where nano is the name of the package I wanted.&lt;/p&gt;
&lt;p&gt;I should point out you don’t need to be root to do this!, but the installed packages only work for you, and in future could cause you hassle if the base OS is updated.&lt;/p&gt;
&lt;p&gt;On Ubuntu I however failed :( I tried the “–root” option and did some &lt;a href=&#34;http://ubuntuforums.org/archive/index.php/t-513933.html&#34;&gt;Googleing&lt;/a&gt; but I didn’t find a solution. Unitl then I’ll just install from source.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>