<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firmware on bramp.net</title>
    <link>http://bramp.net/blog/tags/firmware/</link>
    <description>Recent content in Firmware on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 24 Jan 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bramp.net/blog/tags/firmware/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hacking Linksys E4200v2 firmware</title>
      <link>http://bramp.net/blog/2012/01/24/hacking-linksys-e4200v2-firmware/</link>
      <pubDate>Tue, 24 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2012/01/24/hacking-linksys-e4200v2-firmware/</guid>
      <description>&lt;p&gt;In a previous post I &lt;a href=&#34;http://bramp.net/blog/obtaining-the-firmware-for-linksys-e4200v2&#34;&gt;obtained the Linksys E4200v2 firmware&lt;/a&gt;, now I plan to break it apart and see what I can find.&lt;/p&gt;

&lt;p&gt;I start off by simplying using &amp;#8220;file&amp;#8221; on the firmware:&lt;/p&gt;

&lt;pre&gt;bramp@bramp-laptop:~/linksys/update$ file FW_E4200_2.0.36.126507.SSA 

FW_E4200_2.0.36.126507.SSA: u-boot legacy uImage, Linux-2.6.35.8, Linux/ARM, OS Kernel Image (Not compressed), 2677476 bytes, Thu Dec 22 19:40:21 2011, Load Address: 0x00008000, Entry Point: 0x00008000, Header CRC: 0x6ADD9801, Data CRC: 0xB010442D
&lt;/pre&gt;

&lt;p&gt;Well this is a great start. We know we are dealing with Linux, and that this is a normal uImage. I then move on to use a neat little tool called [binwalk][2]. By using libmagic, binwalk tries to find interesting sections of the file.&lt;/p&gt;

&lt;pre&gt;bramp@bramp-laptop:~/linksys/update$ /usr/local/bin/binwalk FW_E4200_2.0.36.126507.SSA 

DECIMAL     HEX         DESCRIPTION
-------------------------------------------------------------------------------------------------------
0           0x0         uImage header, header size: 64 bytes, header CRC: 0x6ADD9801, created: Thu Dec 22 19:40:21 2011, image size: 2677476 bytes, Data Address: 0x8000, Entry Point: 0x8000, data CRC: 0xB010442D, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: none, image name: Linux-2.6.35.8
1124        0x464       LZMA compressed data, properties: 0x87, dictionary size: 250216448 bytes, uncompressed size: 14786800 bytes
16636       0x40FC      gzip compressed data, from Unix, last modified: Thu Dec 22 19:40:18 2011, max compression
2752512     0x2A0000    JFFS2 filesystem data little endian, JFFS node length: 49
..A whole lot of JFFS2 sections..
20974612    0x1400C14   JFFS2 filesystem data little endian, JFFS node length: 51
20974664    0x1400C48   JFFS2 filesystem data little endian, JFFS node length: 193
&lt;/pre&gt;

&lt;p&gt;We find a small LZMA section, and large gzip section, and lots of JFFS2 sections. JFFS2 is a popular embedded file system, so we can guess the bulk of the file system is here. Next we can extract each section using dd:&lt;/p&gt;

&lt;pre&gt;dd bs=1 skip=1124  count=15512   if=FW_E4200_2.0.36.126507.SSA of=image-1.lzma
dd bs=1 skip=16636 count=2735876 if=FW_E4200_2.0.36.126507.SSA of=image-2.gz
dd bs=1 skip=2752512 if=FW_E4200_2.0.36.126507.SSA of=image-3.jffs2
&lt;/pre&gt;

&lt;p&gt;Notice we are using a block size of 1 (so we can count in bytes), and we skip the offset into the file. Then we manually work out the sizes for the lzma and gzip sections. They can be no larger than their start until the next section. If they don&amp;#8217;t fill that full space, then not to worry as these tools will normally ignore trailing data.&lt;/p&gt;

&lt;p&gt;As I&amp;#8217;m interested to see what&amp;#8217;s in the JFFS filesystem, we should mount it. You can&amp;#8217;t mount JFFS like a normal loopback device, you have to create a fake flash device. The following set of command can solve that:&lt;/p&gt;

&lt;pre&gt;sudo modprobe mtdram total_size=32768 erase_size=256
sudo modprobe mtdblock
sudo modprobe mtdchar
# sudo mknod /dev/mtdblock0 b 31 0
dd if=image-3.jffs2 of=/dev/mtdblock0
mount -t jffs2 /dev/mtdblock0 /mnt/disk
&lt;/pre&gt;

&lt;p&gt;The mknod line is only needed if you don&amp;#8217;t already have a /dev/mtdblock0. Also a /mnt/disk needs to be created ahead of time so the mounting works. Anyway once that was done, I cd /mnt/disk and found that it does appear to contain most of the file system. There are all the HTML pages, and binaries (for example busybox).&lt;/p&gt;

&lt;p&gt;Now we should go back to image-1.lzma and image-2.gz. Well straight away trying to decompress image-1&lt;/p&gt;

&lt;pre&gt;lzma -dc image-1.lzma &gt; image-1
lzma: Decoder error
&lt;/pre&gt;

&lt;p&gt;results in a error. So we can assume that was a incorrectly detected by binwalk. Lets now try and decompress image-2.gz:&lt;/p&gt;

&lt;pre&gt;gzip -dc image-2.gz &gt; image-2
gzip: image-2.gz: decompression OK, trailing garbage ignored
&lt;/pre&gt;

&lt;p&gt;So that does indeed produce a large image-2 file, so we can ignore the trailing garbage warning. A quick &amp;#8220;file&amp;#8221; on image-2 doesn&amp;#8217;t reveal anything useful, so I run binwalk on it. This turns up a set of false positives. So I take a different approach. I run:&lt;/p&gt;

&lt;pre&gt;strings image-2&lt;/pre&gt;

&lt;p&gt;This produces a whole host of valid looking strings. From the contents of the strings it makes me think it&amp;#8217;s the actual kernel. A line like this:&lt;/p&gt;

&lt;pre&gt;Linux version 2.6.35.8 (root@ubuntu) (gcc version 4.2.0 20070413 (prerelease) (CodeSourcery Sourcery G++ Lite 2007q1-21)) #1 Thu Dec 22 16:40:10 PST 2011&lt;/pre&gt;

&lt;p&gt;helps me come to that conclusion.&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t finished poking around image-2.gz, but I suspect the interesting parts are mostly in the JFFS2 filesystem. Hopefully this will lead to me getting ssh access to the router, and eventually being able to customise the firmware.&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://code.google.com/p/binwalk/&#34;&gt;http://code.google.com/p/binwalk/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Obtaining the firmware for Linksys E4200v2</title>
      <link>http://bramp.net/blog/2012/01/22/obtaining-the-firmware-for-linksys-e4200v2/</link>
      <pubDate>Sun, 22 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2012/01/22/obtaining-the-firmware-for-linksys-e4200v2/</guid>
      <description>&lt;p&gt;I recently got a Linksys E4200v2 wireless router. It&amp;#8217;s pretty cool, supports IPv6, 2.4Ghz and 5Ghz wifi networks, VPN, etc. The one downside is that the firmware for the router is not available from &lt;a href=&#34;http://homesupport.cisco.com/en-us/wireless/linksys/E4200&#34;&gt;Linksys&amp;#8217;s website&lt;/a&gt;, and the &lt;a href=&#34;http://homesupport.cisco.com/en-us/gplcodecenter&#34;&gt;GPL code&lt;/a&gt; has not been made available, yet&amp;#8230; However, the router has been able to pull updates itself from the Internet.&lt;/p&gt;

&lt;p&gt;So I wanted to acquire the firmware to see if I could do something fun with the router. I set about to figure out how the router does this. My plan was to set my laptop up between Internet interface on the router, and the cable modem. Since my laptop doesn&amp;#8217;t have two network cards, I plugged into a switch and used &lt;a href=&#34;http://ettercap.sourceforge.net/&#34;&gt;Ethercap&lt;/a&gt; to ARP poison to redirect traffic via the laptop.&lt;/p&gt;

&lt;p&gt;Then using &lt;a href=&#34;http://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; I could see the traffic coming out of the router. All I needed to do now was to hit the &amp;#8220;check for updates button&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Firstly I saw two DNS requests, one for the AAAA (IPv6) record for update.linksys.com, then a A request for update.linksys.com. Clearly the updates are coming from there. Secondly I saw a HTTPS connection form to that domain. That makes this a little more complex, as I am unable to see the encrypted traffic, and thus see what is being transferred.&lt;/p&gt;

&lt;p&gt;So, I grabbed a &lt;a href=&#34;http://code.activestate.com/recipes/491264-mini-fake-dns-server/&#34;&gt;simple DNS server&lt;/a&gt;, and set up a simple SSL server following [these instructions][6].&lt;/p&gt;

&lt;p&gt;Now with DNS spoofing, and a fake SSL server, I could intercept encrypted traffic from the router, as long as it does not validate the SSL certificate. Luckily it didn&amp;#8217;t check the validity, and thus I was able to capture the request: (BTW Not checking the cert completely defeats the point of using SSL&amp;#8230; bad Linksys!).&lt;/p&gt;

&lt;pre&gt;POST /cds/update HTTP/1.1
Host: update.linksys.com
Accept: */*
Content-Type: text/xml
Content-Length: 573

&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;&amp;gt;
  &amp;lt;SOAP-ENV:Header/&amp;gt;
  &amp;lt;SOAP-ENV:Body&amp;gt;
    &amp;lt;ns:GetFirmwareFromDeviceRequest xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;
      &amp;lt;ns:LanguageCode&amp;gt;en&amp;lt;/ns:LanguageCode&amp;gt;
      &amp;lt;ns:CountryCode&amp;gt;us&amp;lt;/ns:CountryCode&amp;gt;
      &amp;lt;ns:MacAddress&amp;gt;12:34:56:78:90:ab&amp;lt;/ns:MacAddress&amp;gt;
      &amp;lt;ns:ModelNo&amp;gt;E4200&amp;lt;/ns:ModelNo&amp;gt;
      &amp;lt;ns:HardwareVersion&amp;gt;2&amp;lt;/ns:HardwareVersion&amp;gt;
      &amp;lt;ns:CurrentFirmwareVersion&amp;gt;2.0.36.126507&amp;lt;/ns:CurrentFirmwareVersion&amp;gt;
    &amp;lt;/ns:GetFirmwareFromDeviceRequest&amp;gt;
  &amp;lt;/SOAP-ENV:Body&amp;gt;
&amp;lt;/SOAP-ENV:Envelope&amp;gt;
&lt;/pre&gt;

&lt;p&gt;and the response:&lt;/p&gt;

&lt;pre&gt;&amp;lt;soapenv:Envelope
 xmlns:soapenv=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;
 xmlns:soapenc=&#34;http://schemas.xmlsoap.org/soap/encoding/&#34;
 xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;
 xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&amp;gt;
  &amp;lt;soapenv:Header/&amp;gt;
  &amp;lt;soapenv:Body&amp;gt;
    &amp;lt;ns:GetFirmwareFromDeviceResponse xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;
      &amp;lt;ns:FirmwareList xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;
        &amp;lt;ns:Firmware xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;
          &amp;lt;ns:Version xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;2.0.36.126507&amp;lt;/ns:Version&amp;gt;
          &amp;lt;ns:Revision xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;D&amp;lt;/ns:Revision&amp;gt;
          &amp;lt;ns:ReleaseDate xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;2012-01-06T16:48:08Z&amp;lt;/ns:ReleaseDate&amp;gt;
          &amp;lt;ns:DownloadURI xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;http://download.linksys.com/updates/to0037258865.pdx/FW_E4200_2.0.36.126507.SSA&amp;lt;/ns:DownloadURI&amp;gt;
          &amp;lt;ns:DateFormat xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;yyyy-MM-dd&#39;;T&#39;;HH:mm:ss&#39;;Z&#39;;&amp;lt;/ns:DateFormat&amp;gt;
          &amp;lt;ns:Checksum xmlns:ns=&#34;http://cisco.com/schemas&#34;&amp;gt;1958710861&amp;lt;/ns:Checksum&amp;gt;
        &amp;lt;/ns:Firmware&amp;gt;
      &amp;lt;/ns:FirmwareList&amp;gt;
    &amp;lt;/ns:GetFirmwareFromDeviceResponse&amp;gt;
  &amp;lt;/soapenv:Body&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
&lt;/pre&gt;

&lt;p&gt;(I slightly modified portions of the request and response to hide the identify of my router.).&lt;/p&gt;

&lt;p&gt;I might write a script to make fake requests, but until then you can easily create a request with curl:&lt;/p&gt;

&lt;pre&gt;curl -d @request.raw https://update.linksys.com/cds/update&lt;/pre&gt;

&lt;p&gt;Then you just extract the DownloadURI and&lt;/p&gt;

&lt;pre&gt;curl http://download.linksys.com/updates/to0037258865.pdx/FW_E4200_2.0.36.126507.SSA&lt;/pre&gt;

&lt;p&gt;Voila I now have the firmware. Now I need to figure out what to do with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As requested I fetched the more recent version of the file:&lt;br /&gt;
2.0.37.131047 &amp;#8211; &lt;a href=&#34;http://download.linksys.com/updates/to0040829450.pdx/FW_E4200_2.0.37.131047.SSA&#34;&gt;http://download.linksys.com/updates/to0040829450.pdx/FW_E4200_2.0.37.131047.SSA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6]: &lt;a href=&#34;http://wirewatcher.wordpress.com/2010/07/20/decrypting-ssl-traffic-with-wireshark-and-ways-to-prevent-it/&#34;&gt;http://wirewatcher.wordpress.com/2010/07/20/decrypting-ssl-traffic-with-wireshark-and-ways-to-prevent-it/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>