<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on bramp.net</title>
    <link>http://bramp.net/blog/tags/nodejs/</link>
    <description>Recent content in Nodejs on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 21 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bramp.net/blog/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NationJS talk on NodeJs now on Vimeo</title>
      <link>http://bramp.net/blog/2014/12/21/nationjs-talk-on-nodejs-now-on-vimeo/</link>
      <pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2014/12/21/nationjs-talk-on-nodejs-now-on-vimeo/</guid>
      <description>&lt;p&gt;It&amp;#8217;s a bit late, but finally my NationJS talk is on Vimeo:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//player.vimeo.com/video/93754470&#34; width=&#34;500&#34; height=&#34;281&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;
&lt;a href=&#34;http://vimeo.com/93754470&#34;&gt;Node.js + WebSockets + Wiimote = Fun&lt;/a&gt; from Andrew Brampton on &lt;a href=&#34;https://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Slides here: &lt;a href=&#34;http://bramp.github.io/nodewii-talk/&#34;&gt;http://bramp.github.io/nodewii-talk/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Invalid IP range checking defeated by DNS</title>
      <link>http://bramp.net/blog/2012/11/27/invalid-ip-range-checking-defeated-by-dns/</link>
      <pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2012/11/27/invalid-ip-range-checking-defeated-by-dns/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve seen a particular kind of vulnerability in a few different applications but I&amp;#8217;m not sure of an appropriate name for it. So I thought I&amp;#8217;d write about it, and informally call it the &amp;#8220;DNS defeated IP address check&amp;#8221;. Basically, if you have an application that can be used as a proxy, or can be instructed to make web request, you don&amp;#8217;t want it fetching files from internal services.&lt;/p&gt;

&lt;p&gt;For example, there is a simple proxy called &lt;a href=&#34;https://github.com/atmos/camo&#34;&gt;Camo&lt;/a&gt;, which is used to fetch third party images when you need to display them on a SSL secure site. (Read more about Camo on the &lt;a href=&#34;https://github.com/blog/743-sidejack-prevention-phase-3-ssl-proxied-assets&#34;&gt;GitHub blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This kind of application can be incorrectly setup such that the application has access to internal servers and resources that wouldn&amp;#8217;t normally be exposed to the Internet. This make the proxy application a good way a hacker could gain information about a private network. However Camo tries to address this issue by forbidding URLs that contain private IP addresses. It does a check like so:&lt;/p&gt;

&lt;pre&gt;RESTRICTED_IPS = /^((10\.)|(127\.)|(169\.254)|(192\.168)|(172\.((1[6-9])|(2[0-9])|(3[0-1]))))/

if (url.host.match(RESTRICTED_IPS))
  return four_oh_four(resp, &#34;Hitting excluded hostnames&#34;)
&lt;/pre&gt;

&lt;p&gt;This code (written for &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; in &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeeScript&lt;/a&gt;) is taking a &lt;a href=&#34;http://nodejs.org/api/url.html&#34;&gt;url object&lt;/a&gt; and checking the hostname doesn&amp;#8217;t match a restricted address. This works great against URLs such as &lt;a href=&#34;http://127.0.0.1/&#34;&gt;http://127.0.0.1/&lt;/a&gt;, or &lt;a href=&#34;http://10.0.0.1/&#34;&gt;http://10.0.0.1/&lt;/a&gt;, however this check can easily be defeated. If you create a domain name, such as localhost.bramp.net, which resolves to 127.0.0.1, and ask the proxy to fetch &lt;a href=&#34;http://localhost.bramp.net/&#34;&gt;http://localhost.bramp.net/&lt;/a&gt;, then it won&amp;#8217;t be caught by that check. Now the proxy will continue to try and fetch a resource from 127.0.0.1.&lt;/p&gt;

&lt;p&gt;The solution to this problem is to do that IP address check &lt;strong&gt;after&lt;/strong&gt; the DNS name has been resolved. This can also be problematic if you use a standard library for making web requests, as they will do the DNS lookup for you, and don&amp;#8217;t give you the fine grain control you need. For example, I&amp;#8217;ve seen this be a problem for a Java application using the &lt;a href=&#34;http://hc.apache.org/httpclient-3.x/&#34;&gt;Apache HTTP Client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One might naively assume they could do a DNS check, and then hand the processing to a HTTP library to make the actual request. The issue here is that the DNS record the HTTP library uses might not be the same as the one you checked against with the DNS check. For example, many domains have multiple A records, and some DNS servers can be configured to round robin DNS records. If you can&amp;#8217;t be sure the HTTP library will do another DNS requests, then you&amp;#8217;d be vulnerable.&lt;/p&gt;

&lt;p&gt;Luckily, in Camo&amp;#8217;s case the fix was relatively easy (see my &lt;a href=&#34;https://github.com/atmos/camo/pull/19&#34;&gt;pull request&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;# We do DNS lookup ourselves
Dns.lookup url.host, (err, address, family) -&gt;
  if address.match(RESTRICTED_IPS)
    return four_oh_four(resp, &#34;Hitting excluded hostnames&#34;)

  # We connect to the IP address, not hostname
  src = Http.createClient url.port || 80, address

  # We add a host header, so the request will work
  headers = 
    &#34;Host&#39; : url.host

  # Boom, we make the request
  srcReq = src.request &#39;GET&#39;, query_path, headers
&lt;/pre&gt;

&lt;p&gt;The above code was simplified a little from the real code, but basically we do the DNS lookup, check the returned address is good, and then make a HTTP request to that IP address with a &lt;code&gt;Host:&lt;/code&gt; header to ensure the request will work.&lt;/p&gt;

&lt;p&gt;Really though, the correct solution to this is to configure a suitably paranoid firewall to stop requests from the proxy machine to anything internal. However, as with all security, the more [layers of protection][8] you have the better, and you should never depend on just one.&lt;/p&gt;

&lt;p&gt;[8]: &lt;a href=&#34;http://en.wikipedia.org/wiki/Swiss_cheese_model&#34;&gt;http://en.wikipedia.org/wiki/Swiss_cheese_model&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nodewii talk at Node DC</title>
      <link>http://bramp.net/blog/2012/11/14/nodewii-talk-at-node-dc/</link>
      <pubDate>Wed, 14 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2012/11/14/nodewii-talk-at-node-dc/</guid>
      <description>&lt;p&gt;Last night I gave a short talk at &lt;a href=&#34;http://nodedc.github.com/&#34;&gt;NodeDC&lt;/a&gt;, on how to use Node.js with a wiimote. The offical title was &amp;#8220;Controlling Node.js with a wiimote &amp;#8211; My experiences with developing multi-threaded nodejs addon&amp;#8221;. I&amp;#8217;d like to thank the NodeDC guys for arranging everything last night, it was a great night, with some great talks.&lt;/p&gt;

&lt;p&gt;[&lt;img src=&#34;http://bramp.net/blog/wp-content/uploads/nodewii-talk.png&#34; alt=&#34;&#34; title=&#34;nodewii-talk&#34; width=&#34;981&#34; height=&#34;763&#34; class=&#34;aligncenter size-full wp-image-467&#34; /&gt;][2]&lt;br /&gt;
The slides can be found here: &lt;a href=&#34;http://bramp.github.com/nodewii-talk/&#34;&gt;http://bramp.github.com/nodewii-talk/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://bramp.github.com/nodewii-talk/&#34;&gt;http://bramp.github.com/nodewii-talk/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My experiences with developing multi-threaded nodejs addon</title>
      <link>http://bramp.net/blog/2011/10/17/my-experiences-with-developing-multi-threaded-nodejs-addon/</link>
      <pubDate>Mon, 17 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2011/10/17/my-experiences-with-developing-multi-threaded-nodejs-addon/</guid>
      <description>

&lt;p&gt;I&amp;#8217;ve been modifying an &lt;a href=&#34;https://github.com/tbranyen/nodewii&#34;&gt;existing nodejs extension&lt;/a&gt;, that wraps &lt;a href=&#34;http://abstrakraft.org/cwiid/wiki/libcwiid&#34;&gt;libcwiid&lt;/a&gt; (a C library written to interface with a &lt;a href=&#34;http://en.wikipedia.org/wiki/Wii_Remote&#34;&gt;Wiimote&lt;/a&gt;). This extension uses polling to check if the state of the Wiimote has changed (such as a button being pressed). Libcwiid however provides a callback mechanism to be alerted as soon as a state change occurs. This has the benefit of being instantaneous, instead of at the polling interval.&lt;/p&gt;

&lt;p&gt;While adapting &lt;a href=&#34;https://github.com/bramp/nodewii&#34;&gt;nodewii&lt;/a&gt; to use this callback mechanism I learnt a couple of things about developing multi-threaded nodejs extensions that I thought I&amp;#8217;d share.&lt;/p&gt;

&lt;h4 id=&#34;1-all-v8-operations-must-run-from-the-main-thread:e499f9e6850a25dae3a7acbe432b8d5f&#34;&gt;1) All V8 operations must run from the main thread&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://nodejs.org/&#34;&gt;Nodejs&lt;/a&gt; uses a single thread for executing the &lt;a href=&#34;http://code.google.com/p/v8/&#34;&gt;V8 JavaScript engine&lt;/a&gt;, and multiple worker threads to execute longer running non-JavaScript blocking tasks. Because V8 is not thread safe, all V8 operations must be executed from this single V8 thread. That means you are not allowed to create V8 objects, integers, strings, etc, from any other thread. If you try, race conditions happen, memory get corrupted and nodejs is likely to crash. Helpfully, nodejs does provide a mechanism to simplify using these threads:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;eio_custom(eio_cb execute, int pri, eio_cb cb, void *data);&lt;/pre&gt;

&lt;p&gt;This function allows you to execute a blocking task in a worker thread. Once that task is finished another callback is called on the main JavaScript thread. Multiple extensions use it, and this is the basis for how nodejs provides it&amp;#8217;s callback mechanism. Here is a very short example (adapted from &lt;a href=&#34;https://github.com/bramp/nodewii/blob/master/src/wiimote.cc&#34;&gt;wiimote.cc&lt;/a&gt;) of how to use eio_custom.&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;Handle&amp;lt;Value&amp;gt; WiiMote::Connect(const Arguments&amp; args) {
  WiiMote* wiimote = ObjectWrap::Unwrap&amp;lt;WiiMote&amp;gt;(args.This());
  Local&amp;lt;Function&amp;gt; callback;

  HandleScope scope;

  // Pass the arguments like you would any other method
  if(args.Length() == 0 || !args[0]-&amp;gt;IsFunction()) {
    return ThrowException(
      Exception::Error(String::New(&#34;Callback is required and must be a Function.&#34;))
    );
  }

  callback = Local&amp;lt;Function&amp;gt;::Cast(args[0]);

  // Create a struct to pass into worker thread
  connect_request* ar = new connect_request();
  ar-&amp;gt;wiimote = wiimote;
  ar-&amp;gt;callback = Persistent&amp;lt;Function&amp;gt;::New(callback);

  // Add a reference to the wiimote, so it isn&#39;t garbage collected between now
  // and the callback being run
  wiimote-&amp;gt;Ref();

  // Add reference to the EV (JavaScript) thread
  ev_ref(EV_DEFAULT_UC);

  // Schedule the Connect function to be called.
  eio_custom(Connect, EIO_PRI_DEFAULT, AfterConnect, ar);

  return Undefined();
}


int WiiMote::Connect(eio_req* req) {
  // This method is running in a worker thread, and NOT the main nodejs
  // thread. This mean you can&#39;t use any V8 methods.

  connect_request* ar = static_cast&amp;lt;connect_request* &amp;gt;(req-&amp;gt;data);
  // Do some work with the connect_request, and put the results back into the struct
  ...

  return 0;
}

int WiiMote::AfterConnect(eio_req* req) {
  // Once the &#34;Connect&#34; method has finished, this method will be called on
  // the main nodejs thread. This means we can now use normal V8 methods.

  HandleScope scope;

  // Retrieve the info from the request
  connect_request* ar = static_cast&amp;lt;connect_request* &amp;gt;(req-&amp;gt;data);
  WiiMote * wiimote = ar-&amp;gt;wiimote;

  // We no longer need a reference to the follow things
  ev_ref(EV_DEFAULT_UC);
  wiimote-&amp;gt;Unref();

  // Create some JavaScript objects, and call the callback
  Local&amp;lt;Value&amp;gt; argv[1] = { Integer::New(ar-&amp;gt;err) };

  TryCatch try_catch;

  ar-&amp;gt;callback-&amp;gt;Call(Context::GetCurrent()-&amp;gt;Global(), 1, argv);

  if(try_catch.HasCaught())
    FatalException(try_catch);

  // Now cleanup!
  ar-&amp;gt;callback.Dispose();
  delete ar;

  return 0;
}
&lt;/pre&gt;

&lt;p&gt;This simple pattern makes writing callback code relatively simple. However, this only works well if you are in control of creating the callback.&lt;/p&gt;

&lt;h4 id=&#34;2-how-to-run-something-on-the-main-thread-without-eio-custom:e499f9e6850a25dae3a7acbe432b8d5f&#34;&gt;2) How to run something on the main thread without eio_custom&lt;/h4&gt;

&lt;p&gt;Libcwiid creates it&amp;#8217;s own thread, which is uses to read data from the wiimote. When data is received, it invokes a callback function passing this new data. This callback function is run on the libcwiid thread. This restricts us from interacting with V8. We ideally need this callback function running in the context of the main thread. The answer to this problem is:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;eio_req *eio_nop       (int pri, eio_cb cb, void *data);&lt;/pre&gt;

&lt;p&gt;It is safe to call this function from any thread. It will place the eio_cb callback task on the main event queue. This task is then eventually executed on the V8&amp;#8242;s thread. An example of this follows:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;void WiiMote::HandleMessages(cwiid_wiimote_t *wiimote, int len, union cwiid_mesg mesgs[]) {
  // This thread is running on the libcwiid&#39;s thread, and thus we can not use V8 operations
  WiiMote *self = const_cast&amp;lt;WiiMote*&amp;gt;(static_cast&amp;lt;const WiiMote*&amp;gt;(cwiid_get_data(wiimote)));

  // Create a struct to pass to the V8 thread
  struct message_request * req = (struct message_request *)malloc( sizeof(*req) + sizeof(req-&amp;gt;mesgs) * (len - 1) );

  // Copy all the data into this struct
  req-&amp;gt;wiimote = self;
  req-&amp;gt;len = len;
  memcpy(req-&amp;gt;mesgs, mesgs, len * sizeof(union cwiid_mesg));

  // Now pass this over to the main V8 thread
  eio_nop (EIO_PRI_DEFAULT, WiiMote::HandleMessagesAfter, req);
}

int WiiMote::HandleMessagesAfter(eio_req *req) {
  // We are now running in the V8 thread.
  message_request* r = static_cast&amp;lt;message_request* &amp;gt;(req-&amp;gt;data);
  WiiMote * self = r-&amp;gt;wiimote;

  HandleScope scope;

  // Create JavaScript objects with the message_request
  ...

  // Emit this event to a JavaScript callback.
  this-&amp;gt;Emit(event, 1, argv);
}
&lt;/pre&gt;

&lt;p&gt;Using a combination of eio_custom and eio_nop you should be able to interface with any external library of service. You just have to make sure you always know what thread you are on, and what methods you are allowed to use in that context.&lt;/p&gt;

&lt;p&gt;Finally, writing correct thread-safe code is hard. From the various nodejs extensions I have come across I regularlly find memory management, or threading issues with them. So I suggest you rigorously use [valgrind][8] while developing, and simplify your designs so that most of the heavily lifting is done by nodejs itself.&lt;/p&gt;

&lt;p&gt;[8]: &lt;a href=&#34;http://valgrind.org/&#34;&gt;http://valgrind.org/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>