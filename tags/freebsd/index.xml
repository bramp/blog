<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Freebsd on bramp.net</title>
    <link>https://bramp.github.io/tags/freebsd/</link>
    <description>Recent content in Freebsd on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 14 Jan 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://bramp.github.io/tags/freebsd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Installing packages into your user directory</title>
      <link>https://bramp.github.io/post/2010/01/14/installing-packages-into-your-user-directory/</link>
      <pubDate>Thu, 14 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2010/01/14/installing-packages-into-your-user-directory/</guid>
      <description>&lt;p&gt;Today I had the need to install some &lt;a href=&#34;http://www.freebsd.org/&#34;&gt;FreeBSD&lt;/a&gt; and &lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; packages inside my home directory because I did not have root permissions to install them.&lt;/p&gt;

&lt;p&gt;It was quite simple to install the packages on FreeBSD&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;pkg_add -rRP /home/bramp nano
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where nano is the name of the package I wanted.&lt;/p&gt;

&lt;p&gt;I should point out you don&amp;#8217;t need to be root to do this!, but the installed packages only work for you, and in future could cause you hassle if the base OS is updated.&lt;/p&gt;

&lt;p&gt;On Ubuntu I however failed :( I tried the &amp;#8220;&amp;#8211;root&amp;#8221; option and did some &lt;a href=&#34;http://ubuntuforums.org/archive/index.php/t-513933.html&#34;&gt;Googleing&lt;/a&gt; but I didn&amp;#8217;t find a solution. Unitl then I&amp;#8217;ll just install from source.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updatingâ€¦/-\|/-|</title>
      <link>https://bramp.github.io/post/2009/12/19/updating/-%5C/-/</link>
      <pubDate>Sat, 19 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/12/19/updating/-%5C/-/</guid>
      <description>&lt;p&gt;Do people other than me find updating their servers to be relaxing? At every opportunity I run &amp;#8220;apt-get update&amp;#8221;. Today I&amp;#8217;m updating 7 different machines simultaneously.&lt;/p&gt;

&lt;p&gt;My Debian machines I simply issue the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;apt-get update
apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My FreeBSD machines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;portsnap fetch update
portmanager -u
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think the Debian process is easier (and clearly the fastest) but it obviously has to do less work because I&amp;#8217;m downloading precompiled code. Portmanager is just as easy but seems to randomly ask me questions through the process whereas apt-get seems to get them out of the way early on. Either way I find this all very easy and relaxing&amp;#8230; until I have to reboot the machines and find something is broken :/&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Useful scripts/configurations</title>
      <link>https://bramp.github.io/post/2009/11/28/useful-scripts/configurations/</link>
      <pubDate>Sat, 28 Nov 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/11/28/useful-scripts/configurations/</guid>
      <description>&lt;p&gt;Make &lt;a href=&#34;http://git-scm.com&#34;&gt;git&lt;/a&gt; colourful&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make &lt;a href=&#34;http://www.nano-editor.org/&#34;&gt;nano&lt;/a&gt; colourful&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;cp /usr/local/share/examples/nano/nanorc.sample ~/.nanorc
&lt;span class=&#34;c&#34;&gt;# or&lt;/span&gt;
zcat /usr/share/doc/nano/examples/nanorc.sample.gz &amp;gt;~/.nanorc

&lt;span class=&#34;c&#34;&gt;# then&lt;/span&gt;
nano ~/.nanorc
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To trim trailing whitespace from *.cc on Linux (taken from &lt;a href=&#34;http://zebert.blogspot.com/2009/06/clean-up-trailing-whitespaces-in.html&#34;&gt;this blog&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;find . -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.cc&amp;#39;&lt;/span&gt; -exec sed -i &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/[ \t]*$//&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and on BSDs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;find . -name &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.cc&amp;#39;&lt;/span&gt; -exec sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/\ *$//&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Linux style &amp;#8216;ls&amp;#8217; colours on FreeBSD (taken from &lt;a href=&#34;http://www.puresimplicity.net/~hemi/freebsd/misc.html&#34;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLICOLOR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LSCOLORS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;ExGxFxdxCxDxDxhbadExEx&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To ensure the http_proxy environmental variable is passed to sudo. Edit the sudoers file by running visudo. Then add the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;Defaults env_keep +&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;ftp_proxy http_proxy https_proxy&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bash autocompletion on FreeBSD:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt;  /usr/ports/shells/bash-completion
sudo make install clean
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit ~/.bashrc and add&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -f /usr/local/etc/bash_completion &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    . /usr/local/etc/bash_completion
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make svn output colorful&lt;br /&gt;
Edit ~/.subversion/config&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[helpers]&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;diff-cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/usr/bin/colordiff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create diffs with function names and ignoring whitespace&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;svn diff -x -uwp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To be continued&amp;#8230;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD Software Watchdog</title>
      <link>https://bramp.github.io/post/2009/10/16/freebsd-software-watchdog/</link>
      <pubDate>Fri, 16 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/10/16/freebsd-software-watchdog/</guid>
      <description>&lt;p&gt;Recently I&amp;#8217;ve been doing some kernel hacking and I managed to deadlock my system. The system still responded to pings but the terminal was unresponsive, and it needed a hard reboot to fix. I would have loved to drop into a debugger or panic&amp;#8217;ed the kernel to get a suitable back-trace.&lt;/p&gt;

&lt;p&gt;I found that FreeBSD has a software watchdog feature, that will panic the kernel if a problem like this occurs. The watchdog does not seem to be built into the kernel by default, and I found the documentation a bit lacking. So here is what I did:&lt;/p&gt;

&lt;p&gt;Firstly, build and install a custom kernel which includes: &lt;code&gt;options SW_WATCHDOG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Secondly, edit the &lt;code&gt;/etc/rc.conf&lt;/code&gt; file and add a line: &lt;code&gt;watchdogd_enable=&amp;quot;YES&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you next reboot, the watchdogd daemon will run, enabling the watchdog feature. Every second the watchdogd will reset a timer within the kernel. If after 16 seconds the timer has not been reset, the kernel will print out some interrupt information, and panic.&lt;/p&gt;

&lt;p&gt;Watchdogd seems to have some useful features, for example, you can configure it to execute a specific command every second, and if that command fails the timer will not be reset. The configuration option I use is: &lt;code&gt;watchdogd_flags=&amp;quot;-e /bin/ps&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Read &lt;a href=&#34;http://www.freebsd.org/cgi/man.cgi?query=watchdogd&amp;amp;sektion=8&#34;&gt;WATCHDOGD(8)&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>memcmp broken in the FreeBSD kernel</title>
      <link>https://bramp.github.io/post/2009/08/10/memcmp-broken-in-the-freebsd-kernel/</link>
      <pubDate>Mon, 10 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/08/10/memcmp-broken-in-the-freebsd-kernel/</guid>
      <description>&lt;p&gt;I&amp;#8217;ve spent a day tracking down a bug in a FreeBSD kernel module I&amp;#8217;m developing, and to my surprise the bug was due to memcmp being broken! For those that don&amp;#8217;t know, memcmp is used to compare two byte strings and returns 0 if they are identical, a negative number of the first string is less than the second, and a positive number of the first string is greater than the second.&lt;/p&gt;

&lt;p&gt;However, the implementation of memcmp in the FreeBSD kernel looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__inline&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem with this is that bcmp is defined to return 0 if the strings are identical, otherwise returns a non-zero integer. This is not the same as memcmp, and you would only notice this if you are testing the signedness of the return value. I suspect this has not been noticed because traditionally FreeBSD has favoured bcmp, and in the few cases it does uses memcmp it only compares it with zero.&lt;/p&gt;

&lt;p&gt;There is some good news, obrien@ noticed this problem in September 2008 and commited a patch (svn r183299). However, it looks like this fix won&amp;#8217;t be included until FreeBSD 8.0. In the mean time I&amp;#8217;m implementing a minor hack to fix this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_memcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

		&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define memcmp my_memcmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Threadnetperf v1.0</title>
      <link>https://bramp.github.io/post/2009/06/01/threadnetperf-v1.0/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/06/01/threadnetperf-v1.0/</guid>
      <description>&lt;p&gt;Today I am proud to announce that I&amp;#8217;m releasing a tool I&amp;#8217;ve used privately for well over a year now. It is a multi-threaded network testing tool which gives the user great control over how many connections, threads and processes the tool uses, and which CPU cores the threads/processes are allowed to execute on.&lt;/p&gt;

&lt;p&gt;Currently the tool runs on Linux, FreeBSD, and Windows, and has performance as good as (if not better) than other similar tools, such as netperf, iperf, but with the added flexibility. Additionally, Threadnetperf has been completely written from scratch in C, using modern programming techniques and APIs (such as ePoll on Linux) which ensures the program runs as far as possible with minimal overheads.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#34;https://github.com/bramp/threadnetperf&#34;&gt;download the source from GitHub&lt;/a&gt;, which contains instructions on how to build it.&lt;/p&gt;

&lt;p&gt;So that you get an extra idea of it&amp;#8217;s features here is the README.txt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;****** Threadnetperf ******
A multi-threaded network benchmark tool
 by  Andrew Brampton (2007-2009)
 and Mathew Faulkner (2007-2009)

Threadnetperf is a highly customisable high performance network benchmarking
tool. The key difference from previous tools is that the user is able to control
how many threads threadnetperf uses, as well as which cores these threads are
pinned to. This tool was useful in our research for measuring the effect of
sending or receiving from one core, and having the OS network stack run on
another core. Additionally the tool can be configured to use an unlimited number
of connections, threads or processes, which scale considerably well due to the
use of the epoll API.

Threadnetperf has previously worked on Windows, Linux, and FreeBSD, however, we
do not test it very rigorously so one of these platforms may be broken. All
patches are welcome.

To build on a *nix style system just use the simple &amp;quot;Makefile&amp;quot; by executing the
command &amp;quot;make&amp;quot; or &amp;quot;gmake&amp;quot;. To build on Windows just use the provided
threadnetperf.2008.sln file.

All the commands of Threadnetperf are documented within the application, but a
quick overview is here:

Usage: threadnetperf [options] tests
Usage: threadnetperf -D [options]
       -c level,interval   Confidence level, must be 95 or 99
       -D         Use daemon mode (wait for incoming tests)
       -d time    Set duration to run the test for
       -e         Eat the data (i.e. dirty it)
       -H host    Set the remote host(and port) to connect to
       -h         Display this help
       -i min,max Set the minimum and maximum iterations
       -m [t,p]   What programming model to use, [thread or process]
       -n         Disable Nagle&amp;#39;s algorithm (e.g no delay)
       -p port    Set the port number for the first server thread to use
       -s size    Set the send/recv size
       -T         Timestamp packets, and measure latency (only on *nix)
       -t         Use TCP
       -r         Packets per second rate (default: ~0)
       -u         Use UDP
       -v         Verbose
       -V         Display version only

       tests      Combination of cores and clients
       tests      Core numbers are masks, for example 1 is core 0, 3 is core 0
and core 1
               N{c-s}   N connections
                        c client cores mask
                        s server cores mask

You can run tests locally, or across two machines. Here are some examples:

    threadnetperf -n -s 10000 1{1-1}

Will run a local TCP test, with Nagle&amp;#39;s algorithm disabled, a send size of
10,000, and 1 TCP connection between cores 0 and 0.

    threadnetperf 10{1-1} 10{2-2} 10{4-4}

Will again run a local TCP test, however this time 10 connection from core 0 to
core 0, 10 connections from core 1 to core 1, and 10 connections from core 2 to
core 2

To run across a network just start the threadnetperf daemon on one of the
machines like so:

     threadnetperf -D

and on the other machine execute:

     threadnetperf -H serverIP 1{1-2}

which will conduct a TCP test from the client to the server, with one thread
executing on client&amp;#39;s core 0, and the server&amp;#39;s core 1.

There is no need to give the threadnetperf daemon any options, as the options
configured on the server will be passed over the network. This make running many
tests very easy as the daemon will continue to wait for new tests until it is
told otherwise.

If you find this tool useful, or you have any suggestions for improvements then
please contact us.
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Compiler defined symbols</title>
      <link>https://bramp.github.io/post/2009/03/06/compiler-defined-symbols/</link>
      <pubDate>Fri, 06 Mar 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/03/06/compiler-defined-symbols/</guid>
      <description>&lt;p&gt;I found this neat little command to list all the GCC compiler defined symbols&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;gcc -dM -E - &amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can help if you aren&amp;rsquo;t quite sure which defines are used on your systems. For example my FreeBSD 7.1 machine outputs this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define __DBL_MIN_EXP__ (-1021)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MIN__ 1.17549435e-38F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_DEN__ 0.000000000000001E-383DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __CHAR_BIT__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __WCHAR_MAX__ 2147483647&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_DENORM_MIN__ 4.9406564584124654e-324&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_EVAL_METHOD__ 0&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MIN_10_EXP__ (-307)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FINITE_MATH_ONLY__ 0&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MAX_EXP__ 384&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SHRT_MAX__ 32767&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MAX__ 1.18973149535723176502e+4932L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __UINTMAX_TYPE__ long unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_EPSILON__ 1E-6DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __unix 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SCHAR_MAX__ 127&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __USER_LABEL_PREFIX__&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __STDC_HOSTED__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MIN_EXP__ (-383)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_DIG__ 15&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_EPSILON__ 1.19209290e-7F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MIN__ 3.36210314311209350626e-4932L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MAX__ 9.999999E96DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __unix__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DECIMAL_DIG__ 21&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_HAS_QUIET_NAN__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC__ 4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __MMX__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_HAS_DENORM__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FreeBSD_cc_version 700003&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MAX__ 1.7976931348623157e+308&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_HAS_INFINITY__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MIN_EXP__ (-95)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_HAS_DENORM__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MIN__ 1E-95DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MAX_EXP__ 1024&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_EPSILON__ 1E-33DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE2_MATH__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __amd64 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LONG_LONG_MAX__ 9223372036854775807LL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GXX_ABI_VERSION 1002&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MIN_EXP__ (-125)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __x86_64 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MIN__ 2.2250738585072014e-308&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LP64__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_HAS_QUIET_NAN__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MIN__ 1E-6143DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __REGISTER_PREFIX__&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_HAS_DENORM__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __NO_INLINE__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC_EVAL_METHOD__ 2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MANT_DIG__ 24&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __VERSION__ &amp;quot;4.2.1 20070719  [FreeBSD]&amp;quot;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_EPSILON__ 1E-15DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MIN_EXP__ (-6143)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define unix 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZE_TYPE__ long unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_DEN__ 0.000001E-95DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __ELF__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_RADIX__ 2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_EPSILON__ 1.08420217248550443401e-19L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FreeBSD__ 7&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE_MATH__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __k8 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_DIG__ 18&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __KPRINTF_ATTRIBUTE__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __x86_64__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_HAS_QUIET_NAN__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MAX_10_EXP__ 38&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LONG_MAX__ 9223372036854775807L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_HAS_INFINITY__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MAX__ 9.999999999999999E384DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MANT_DIG__ 16&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MAX_EXP__ 96&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_DEN__ 0.000000000000000000000000000000001E-6143DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MANT_DIG__ 64&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define _LONGLONG 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MANT_DIG__ 7&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __k8__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __WCHAR_TYPE__ int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_DIG__ 6&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __INT_MAX__ 2147483647&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MAX_EXP__ 128&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MANT_DIG__ 53&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MIN__ 1E-383DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __WINT_TYPE__ unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MIN_EXP__ (-16381)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __amd64__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MAX_EXP__ 16384&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MAX_10_EXP__ 4932&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_EPSILON__ 2.2204460492503131e-16&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define _LP64 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC_PATCHLEVEL__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_HAS_INFINITY__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __INTMAX_MAX__ 9223372036854775807L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_DENORM_MIN__ 1.40129846e-45F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MAX__ 3.40282347e+38F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE2__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MIN_10_EXP__ (-37)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __INTMAX_TYPE__ long int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MAX_EXP__ 6144&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC_MINOR__ 2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MAX_10_EXP__ 308&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __STDC__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __PTRDIFF_TYPE__ long int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MANT_DIG__ 34&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MIN_10_EXP__ (-4931)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC_GNU_INLINE__ 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and my Debian Linux machine outputs this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define __DBL_MIN_EXP__ (-1021)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MIN__ 1.17549435e-38F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_DEN__ 0.000000000000001E-383DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __CHAR_BIT__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __WCHAR_MAX__ 2147483647&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_DENORM_MIN__ 4.9406564584124654e-324&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_EVAL_METHOD__ 0&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __unix__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __x86_64 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MIN_10_EXP__ (-307)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FINITE_MATH_ONLY__ 0&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC_PATCHLEVEL__ 3&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MAX_EXP__ 384&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SHRT_MAX__ 32767&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MAX__ 1.18973149535723176502e+4932L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __UINTMAX_TYPE__ long unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __linux 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_EPSILON__ 1E-6DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __unix 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MAX_EXP__ 16384&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __linux__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SCHAR_MAX__ 127&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_DIG__ 15&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_INT__ 4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_POINTER__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __USER_LABEL_PREFIX__&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __STDC_HOSTED__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_HAS_INFINITY__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_EPSILON__ 1.19209290e-7F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MIN__ 3.36210314311209350626e-4932L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MAX__ 9.999999E96DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_LONG__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DECIMAL_DIG__ 21&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __gnu_linux__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_HAS_QUIET_NAN__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC__ 4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __MMX__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_HAS_DENORM__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_LONG_DOUBLE__ 16&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MAX__ 1.7976931348623157e+308&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_HAS_INFINITY__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MIN_EXP__ (-95)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_HAS_DENORM__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MIN__ 1E-95DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MAX_EXP__ 1024&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_EPSILON__ 1E-33DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE2_MATH__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __amd64 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LONG_LONG_MAX__ 9223372036854775807LL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_SIZE_T__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_WINT_T__ 4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GXX_ABI_VERSION 1002&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MIN_EXP__ (-125)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MIN__ 2.2250738585072014e-308&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LP64__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DECIMAL_BID_FORMAT__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MIN__ 1E-6143DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __REGISTER_PREFIX__&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_HAS_DENORM__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __NO_INLINE__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MANT_DIG__ 24&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __VERSION__ &amp;quot;4.3.3&amp;quot;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_EPSILON__ 1E-15DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MIN_EXP__ (-6143)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define unix 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZE_TYPE__ long unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_DEN__ 0.000001E-95DF&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __ELF__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_RADIX__ 2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_EPSILON__ 1.08420217248550443401e-19L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE_MATH__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __k8 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_PTRDIFF_T__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __x86_64__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_HAS_QUIET_NAN__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MAX_10_EXP__ 38&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LONG_MAX__ 9223372036854775807L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_HAS_INFINITY__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MAX__ 9.999999999999999E384DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MANT_DIG__ 16&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MAX_EXP__ 96&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define linux 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_DEN__ 0.000000000000000000000000000000001E-6143DL&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE2__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MANT_DIG__ 64&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_HAS_QUIET_NAN__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __k8__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __WCHAR_TYPE__ int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_FLOAT__ 4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MIN_EXP__ (-383)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_DIG__ 6&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __INT_MAX__ 2147483647&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __amd64__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MAX_EXP__ 128&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MANT_DIG__ 53&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC64_MIN__ 1E-383DD&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __WINT_TYPE__ unsigned int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_SHORT__ 2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SSE__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MIN_EXP__ (-16381)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MAX_10_EXP__ 4932&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_EPSILON__ 2.2204460492503131e-16&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define _LP64 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_WCHAR_T__ 4&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC_EVAL_METHOD__ 2&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __INTMAX_MAX__ 9223372036854775807L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_DENORM_MIN__ 1.40129846e-45F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MAX__ 3.40282347e+38F&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_DOUBLE__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __FLT_MIN_10_EXP__ (-37)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __INTMAX_TYPE__ long int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MAX_EXP__ 6144&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC_MINOR__ 3&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC32_MANT_DIG__ 7&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DBL_MAX_10_EXP__ 308&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __STDC__ 1&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __PTRDIFF_TYPE__ long int&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __DEC128_MANT_DIG__ 34&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_MIN_10_EXP__ (-4931)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __SIZEOF_LONG_LONG__ 8&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __LDBL_DIG__ 18&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define __GNUC_GNU_INLINE__ 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Autoload symbols for FreeBSD kernel module</title>
      <link>https://bramp.github.io/post/2009/01/11/autoload-symbols-for-freebsd-kernel-module/</link>
      <pubDate>Sun, 11 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/01/11/autoload-symbols-for-freebsd-kernel-module/</guid>
      <description>&lt;p&gt;When debugging FreeBSD kernel modules with GDB, you have to tell GDB the correct symbols for the module, and the location the module is loaded in RAM. This is helpfully explained in the &lt;a href=&#34;http://www.freebsd.org/doc/en/books/developers-handbook/kerneldebug-kld.html&#34;&gt;FreeBSD Developers&amp;#8217; Handbook&lt;/a&gt;. First you must load the module, then run kldstat, note down the address the module is loaded at, and finally execute a command in GDB that looks like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;add-symbol-file /sys/modules/linux/linux.ko 0xc0ae22d0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, I find this process tedious, so instead I wrote a quick python script which can be used with an &lt;a href=&#34;http://sourceware.org/gdb/wiki/PythonGdb&#34;&gt;experimental gdb built with python scripting support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gdb&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FreeBSD_ReloadModuleSymbols&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;quot;Reloads the symbol files for all loaded kernel modules&amp;quot;&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FreeBSD_ReloadModuleSymbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;reload-freebsd-module-symbols&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COMMAND_FILES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COMPLETE_NONE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;invoke&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from_tty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_and_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;linker_files-&amp;gt;tqh_first&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;kernel&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;add-symbol-file &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; 
					&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;pathname&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;  
					&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;address&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;tqe_next&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;FreeBSD_ReloadModuleSymbols&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You load this by running the following command in GDB:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;source &lt;/span&gt;freebsd_load_modules.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then the command &lt;code&gt;reload-freebsd-module-symbols&lt;/code&gt; is magically added to GDB. Running this command will parse the linker table inside the FreeBSD kernel, determine which modules are loaded, and attempt to load their symbols.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>linuxoffsets for FreeBSD</title>
      <link>https://bramp.github.io/post/2009/01/11/linuxoffsets-for-freebsd/</link>
      <pubDate>Sun, 11 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://bramp.github.io/post/2009/01/11/linuxoffsets-for-freebsd/</guid>
      <description>&lt;p&gt;VMWare 6 and above has this neat debugging functionality where you can attach gdb running on a host, to a guest running inside VMWare. This allows you to debug a running kernel, or on linux running processes.&lt;/p&gt;

&lt;p&gt;However, VMWare seems to have coded a bit of a hack to allow gdb to understand what process/threads are inside the virtual machine. Now this hack involves using something called linuxoffsets, which provides the offset for certain fields in a linux kernel struct.&lt;/p&gt;

&lt;p&gt;So I thought I could abuse these offsets, and hopefully make them work for FreeBSD. The Linux offsets are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Linux Values&lt;/th&gt;
&lt;th&gt;FreeBSD 7.1 Values&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;version&amp;gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Version number of linux kernel, ie 0x020609 (2.6.9)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;mm&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;mm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;next_task&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;next_task (linux &amp;lt; 2.4.15)&lt;/td&gt;
&lt;td&gt;struct proc-&amp;gt;p_list-&amp;gt;le_next&lt;/td&gt;
&lt;td&gt;Pointer to next task struct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;tasks&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;tasks (linux &amp;gt;= 2.4.15)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Pointers to prev and next task struct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;comm&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;comm&lt;/td&gt;
&lt;td&gt;struct proc-&amp;gt;p_comm&lt;/td&gt;
&lt;td&gt;executable name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;pid&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;pid&lt;/td&gt;
&lt;td&gt;struct proc-&amp;gt;p_pid&lt;/td&gt;
&lt;td&gt;pid of the process&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;thread&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;thread&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;pgd&amp;gt;&lt;/td&gt;
&lt;td&gt;mm_struct-&amp;gt;pgd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;rsp0/esp0&amp;gt;&lt;/td&gt;
&lt;td&gt;thread_struct-&amp;gt;rsp0 (or thread_struct-&amp;gt;esp0 32bit)&lt;/td&gt;
&lt;td&gt;struct thread-&amp;gt;td_sigstk-&amp;gt;ss_sp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;fs&amp;gt;&lt;/td&gt;
&lt;td&gt;thread_struct-&amp;gt;fs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;threadsize&amp;gt;&lt;/td&gt;
&lt;td&gt;0x2000 or sizeof(union thread_union-&amp;gt;stack) (linux &amp;gt;= 2.6)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;grouplead&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;group_leader (linux &amp;gt;= 2.6.11)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;threadgroup&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;thread_group (linux &amp;gt;= 2.6.11)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;commsize&amp;gt;&lt;/td&gt;
&lt;td&gt;sizeof(struct task_struct-&amp;gt;comm)&lt;/td&gt;
&lt;td&gt;sizeof(struct proc-&amp;gt;p_comm)&lt;/td&gt;
&lt;td&gt;executable nameâ€™s max len&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, after some time I feel this isn&amp;#8217;t going to be possible. Each value represents a offset into a Linux task_struct struct, however, nothing represents the location of the first task_struct in RAM. I suspect VMWare is figuring out the location via some other means. Since FreeBSD doesn&amp;#8217;t have a task_struct it most likely won&amp;#8217;t be able to find what it needs.&lt;/p&gt;

&lt;p&gt;Regardless I&amp;#8217;ve posted this entry in case someone wants to continue my work. However, not all is lost as my next solution involves playing with gdb-python.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>