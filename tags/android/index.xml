<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on bramp.net</title>
    <link>https://blog.bramp.net/tags/android/</link>
    <description>Recent content in Android on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <lastBuildDate>Sat, 01 Aug 2015 12:24:59 -0700</lastBuildDate>
    <atom:link href="https://blog.bramp.net/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Decompile and Recompile Android APK</title>
      <link>https://blog.bramp.net/post/2015/08/01/decompile-and-recompile-android-apk/</link>
      <pubDate>Sat, 01 Aug 2015 12:24:59 -0700</pubDate>
      
      <guid>https://blog.bramp.net/post/2015/08/01/decompile-and-recompile-android-apk/</guid>
      <description>

&lt;p&gt;I had the need to take an existing &lt;a href=&#34;https://en.wikipedia.org/wiki/Android_application_package&#34;&gt;Android APK&lt;/a&gt;, tweak it, and rebuild. This is not too difficult, but I did have to download the tools from a few different sites, and find a full list of instructions. Thus to make this easier, here is a quick recap of what&amp;rsquo;s needed.&lt;/p&gt;

&lt;p&gt;Download the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ibotpeaches.github.io/Apktool/&#34;&gt;apktool&lt;/a&gt; - tool for reverse engineering Android apk files. In this case can extract and rebuild.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;keytool&lt;/a&gt; - Java tool for creating keys/certs. Comes with the JDK.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jarsigner.html&#34;&gt;jarsigner&lt;/a&gt; Java tool for signing JAR/APK files. Comes with the JDK.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/tools/help/zipalign.html&#34;&gt;zipalign&lt;/a&gt; - archive alignment tool, that comes with the Android SDK.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some extras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jd.benow.ca/&#34;&gt;JD-GUI&lt;/a&gt; - Java Decompiler&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pxb1988/dex2jar&#34;&gt;dex2jar&lt;/a&gt; - Converts Android dex files to class/jar files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;instructions:096e0b1b76096499632c44bee24eac64&#34;&gt;Instructions:&lt;/h2&gt;

&lt;p&gt;We assume you are on a Linux or Mac, but this will work (with some tweaking) on Windows. Install a recent Java JDK, then the &lt;a href=&#34;https://developer.android.com/sdk/installing/index.html?pkg=tools&#34;&gt;Stand-alone Android SDK&lt;/a&gt;, and finally &lt;a href=&#34;http://ibotpeaches.github.io/Apktool/&#34;&gt;apktool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Optionally setup some alias:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;alias &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;apktool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;java -jar ~/bin/apktool_2.0.1.jar&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;dex2jar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;~/bin/dex2jar-2.0/d2j-dex2jar.sh&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;alias &lt;/span&gt;jd-gui&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;java -jar ~/bin/jd-gui-1.3.0.jar&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, unpack the application.apk file. This will create a &amp;ldquo;application&amp;rdquo; directory with assets, resources, compiled code, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apktool d -r -s application.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now poke around, and edit any of the files in the application directory. If you wish to decompile any java you can do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Convert the Dex files into standard class files&lt;/span&gt;
d2j-dex2jar.sh application/classes.dex

&lt;span class=&#34;c&#34;&gt;# Now use the JD (Java Decompiler) to inspect the source&lt;/span&gt;
jd-gui classes-dex2jar.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have made your changes, you need to repack the APK. This will create a &lt;code&gt;my_application.apk&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apktool b -f -d application
mv application/dist/application.apk my_application.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The APK must be signed before it will run on a device. Create a key if you don&amp;rsquo;t have an existing one. If prompted for a password, enter anything (but remember it).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;keytool -genkey -v -keystore my-release-key.keystore -alias alias_name &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
                   -keyalg RSA -keysize &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt; -validity 10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now sign the APK with the key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Sign the apk&lt;/span&gt;
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name

&lt;span class=&#34;c&#34;&gt;# Verify apk&lt;/span&gt;
jarsigner -verify -verbose -certs my_application.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, the apk must be aligned for optimal loading:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;zipalign -v &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; my_application.apk my_application-aligned.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voila, now you have a &lt;code&gt;my_application-aligned.apk&lt;/code&gt; file, which you can side load onto your device.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I have native IPv6</title>
      <link>https://blog.bramp.net/post/2012/06/26/i-have-native-ipv6/</link>
      <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2012/06/26/i-have-native-ipv6/</guid>
      <description>&lt;p&gt;I&amp;#8217;m more excited than I should be, but today I noticed that Comcast has enabled IPv6 on my home internet connection. All my devices in the home have picked up one or more Internet routable IPv6 addresses. Here are a few screen shots:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;ifconfig-v6.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;IPv6 ifconfig&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;google-v6.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;IPv6 Google!&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;facebook-v6.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;IPv6 Facebook&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;bramp-v6.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;IPv6 my website (thanks to Amazon AWS)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;android-v6.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;even my Android phone has IPv6!&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;So this is very cool, but this has identified a few issues. The most important of which, is that I had previously been using my NAT as a firewall, protecting all devices on the internal network. However, now they all have external IP addresses, they are effectively open to the Internet and un-firewalled. That&amp;#8217;s not an issue for my Linux machines, but could be problematic for my girlfriend&amp;#8217;s Windows laptop, and my various embedded devices (phones, tablets, and TVs).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Avoid Bloat Freezer Free</title>
      <link>https://blog.bramp.net/post/2012/01/14/avoid-bloat-freezer-free/</link>
      <pubDate>Sat, 14 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2012/01/14/avoid-bloat-freezer-free/</guid>
      <description>&lt;p&gt;Over a month ago I install &amp;#8220;Bloat Freezer Free&amp;#8221;, a tool designed to kill of particular services running in the background, such as those installed by your phone manufactor. It seemed to be working fine, but in the last few days I&amp;#8217;ve been getting a green star in my notification bar alerting me to &amp;#8220;There is a update to the Android Market&amp;#8221;. If I click it, it takes me to some spyware looking site to download a new market place. Then today I get an alert with the same green star saying &amp;#8220;Badoo&amp;#8221;. If it click that it links me via some porn advertiser and I end up at the Google Market for the Badoo app.&lt;/p&gt;

&lt;p&gt;I got out the Android SDK, and I figured out the notification was coming from the Bloat Freezer tool! After a few searches I find &lt;a href=&#34;http://androidunderground.blogspot.com/2011/12/bloat-freezer-abuses-airpush-ads-to_22.html&#34;&gt;a article&lt;/a&gt; about how that tool is using a push notification system, AirPush, to send me spam.&lt;/p&gt;

&lt;p&gt;I have now removed this app, and writing this blog entry to helpful save others from this hassle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Linux SDK revision 6 aapt library bug</title>
      <link>https://blog.bramp.net/post/2010/05/23/android-linux-sdk-revision-6-aapt-library-bug/</link>
      <pubDate>Sun, 23 May 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/05/23/android-linux-sdk-revision-6-aapt-library-bug/</guid>
      <description>&lt;p&gt;&lt;strong&gt;UPDATE &amp;#8211; I &lt;a href=&#34;http://code.google.com/p/android/issues/detail?id=8498&#34;&gt;reported this bug&lt;/a&gt; and it was promptly fixed the next day. Read the &lt;a href=&#34;http://code.google.com/p/android/issues/detail?id=8498&#34;&gt;bug report&lt;/a&gt; for solution on how to fix.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://android-developers.blogspot.com/2010/05/android-22-and-developers-goodies.html&#34;&gt;Android 2.2&lt;/a&gt; just came out and along with it came a updated set of &lt;a href=&#34;http://developer.android.com/sdk/tools-notes.html&#34;&gt;SDK tools&lt;/a&gt;. I&amp;#8217;ve been using these tools on Windows, but today I took my Linux laptop out and I&amp;#8217;ve been sat in a &lt;a href=&#34;http://www.juicafe.co.uk/&#34;&gt;coffee shop&lt;/a&gt; hyped up on caffeine but completely unproductive because I&amp;#8217;m going round in circles with what I think is a bug.&lt;/p&gt;

&lt;p&gt;So, I&amp;#8217;m trying the &lt;a href=&#34;http://developer.android.com/guide/developing/other-ide.html#libraryProject&#34;&gt;new library feature&lt;/a&gt;, where you can have a Android library project, which is referenced by one or more Android projects. This allows multiple projects to easily share the same code. The problem is when I set-up my Android project to use a library project I get the following error printed in my eclipse console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;ERROR: Unknown option &amp;#39;--auto-add-overlay&amp;#39;
Android Asset Packaging Tool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the code fails to compile. If I remove the reference to the library project this error goes away.&lt;/p&gt;

&lt;p&gt;The error is coming from the aapt command, which seems to be installed multiple times, once for each SDK version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;locate -r &lt;span class=&#34;s2&#34;&gt;&amp;quot;aapt&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$&amp;quot;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;/home/bramp/android-sdk-linux_86/platforms/android-3/tools/aapt&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;/home/bramp/android-sdk-linux_86/platforms/android-4/tools/aapt&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;/home/bramp/android-sdk-linux_86/platforms/android-7/tools/aapt&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;/home/bramp/android-sdk-linux_86/platforms/android-8/tools/aapt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Checking each command I see that only versions 7 and 8 have the &lt;em&gt;&amp;#8211;auto-add-overlay&lt;/em&gt; option. Both my library and main projects are targeted at Android 1.6 (i.e. android-4). I tried re-targeting my main project to Android 2.2 (i.e. android-8) and the problem seems to go away.&lt;/p&gt;

&lt;p&gt;So for the moment this seems an annoyance, but I can live with it by setting my target to 2.2. Hopefully Google will release a fix so I can still use the older targets with the new library feature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just a quick update:&lt;/strong&gt;&lt;br /&gt;
I noticed that on Windows all versions of the aapt tool support the &amp;#8216;&amp;#8211;auto-add-overlay&amp;#8217; option. So what I suspect has happened is that someone forgot to update the aapt binary for the old platforms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Foursquare Rules</title>
      <link>https://blog.bramp.net/post/2009/12/06/foursquare-rules/</link>
      <pubDate>Sun, 06 Dec 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2009/12/06/foursquare-rules/</guid>
      <description>&lt;p&gt;Everyone plays &lt;a href=&#34;http://foursquare.com/&#34;&gt;foursquare&lt;/a&gt; (the location based android/iPhone app) differently. However, there are no offical rules on what venues are acceptable, and when you can and can&amp;#8217;t check-in. So I wanted to write down the rules that I play by:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1. You talk about foursquare.
2. You talk about foursquare.
3. When someone is near by you go find them.
4, Get as many people to a check-in as possible.
5. One check-in at a time.
6. Check-in with Android, iPhone, or Blackberry devices.
7. You check-in as long and late as you can.
8. If this is your first night at foursquare, you have to check-in.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ok, so that was my attempt of humour by parodying the &lt;a href=&#34;http://www.diggingforfire.net/FightClub/&#34;&gt;rules of fight club&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I actually do play by a set of rules&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1. I only check-in to venues where I&amp;#39;m using their service. For example, I only 
  check-in to a coffee shop if I buy a drink, or I check-in to a train station
  only if I get on or off a train.

2. I don&amp;#39;t check into venues which I am passing though. For example, if my train 
  goes through a train station, but I&amp;#39;m staying on the train I won&amp;#39;t check-in. 
  Or if my girlfriend is dragging me around clothes shops, I won&amp;#39;t check-in 
  unless I&amp;#39;m actually buying something myself.

3. I only check-in to real stationary public venues. I don&amp;#39;t add my house, or
  other made up places, and I don&amp;#39;t check-in into venues such as the number 
  2 bus.

4. I don&amp;#39;t check-in after the fact, for example if I forget at the time to 
  check-in. For example, I was recently in Belgium, and I had pre-added a few 
  places I knew I would be going to, however, I was unable to check-in due to my 
  lack of internet :(

5. I always add full complete information for any venue I create. Sometimes
  when I&amp;#39;m out I&amp;#39;m unable to find the full data, so I fill in as much as I can, and
  later when I get back to my PC I make sure I complete the venue&amp;#39;s details
  fully.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So these are my rules and I&amp;#8217;m sure they will evolve as I play the game more. I would love to hear other people&amp;#8217;s rules.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>