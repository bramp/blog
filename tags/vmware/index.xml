<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vmware on bramp.net</title>
    <link>http://bramp.net/blog/tags/vmware/</link>
    <description>Recent content in Vmware on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 19 Mar 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bramp.net/blog/tags/vmware/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>VMWare breaks shift key</title>
      <link>http://bramp.net/blog/2010/03/19/vmware-breaks-shift-key/</link>
      <pubDate>Fri, 19 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2010/03/19/vmware-breaks-shift-key/</guid>
      <description>&lt;p&gt;I came into my office today to find that my keyboard would no longer type capital letters. The shift, caps lock, and even num lock keys seemed to be broken. After a quick WTF &lt;a href=&#34;http://www.evolution-systems.co.uk/blogs/matt/view_post&amp;amp;id=37/&#34;&gt;it was pointed out to me&lt;/a&gt; that VMWare occasionally does this to Linux machines. Thanks to [Matt][2] who showed me a quick solution. In a terminal just type:&lt;/p&gt;

&lt;pre class=&#34;prettyprint&#34;&gt;setxkbmap&lt;/pre&gt;

&lt;p&gt;And everything should be back to normal. After using VMWare on Linux for a couple of years I&amp;#8217;ve never encountered this problem!&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href=&#34;http://twitter.com/bigkebabman&#34;&gt;http://twitter.com/bigkebabman&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>linuxoffsets for FreeBSD</title>
      <link>http://bramp.net/blog/2009/01/11/linuxoffsets-for-freebsd/</link>
      <pubDate>Sun, 11 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2009/01/11/linuxoffsets-for-freebsd/</guid>
      <description>&lt;p&gt;VMWare 6 and above has this neat debugging functionality where you can attach gdb running on a host, to a guest running inside VMWare. This allows you to debug a running kernel, or on linux running processes.&lt;/p&gt;

&lt;p&gt;However, VMWare seems to have coded a bit of a hack to allow gdb to understand what process/threads are inside the virtual machine. Now this hack involves using something called linuxoffsets, which provides the offset for certain fields in a linux kernel struct.&lt;/p&gt;

&lt;p&gt;So I thought I could abuse these offsets, and hopefully make them work for FreeBSD. The Linux offsets are:&lt;table border=1 cellpadding=3 cellspacing=0&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20style=&#39;height:15.0pt&#39;&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;version&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;mm&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;next_task&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;tasks&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;comm&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;pid&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;thread&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;pgd&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;rsp0/esp0&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;fs&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;threadsize&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;grouplead&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;threadgroup&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;tr height=20 style=&#39;height:15.0pt&#39;&gt; &lt;td height=20 style=&#39;height:15.0pt&#39;&gt;&lt;commsize&gt;&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt; &lt;/table&gt;&lt;/p&gt;

&lt;p&gt;However, after some time I feel this isn&amp;#8217;t going to be possible. Each value represents a offset into a Linux task_struct struct, however, nothing represents the location of the first task_struct in RAM. I suspect VMWare is figuring out the location via some other means. Since FreeBSD doesn&amp;#8217;t have a task_struct it most likely won&amp;#8217;t be able to find what it needs.&lt;/p&gt;

&lt;p&gt;Regardless I&amp;#8217;ve posted this entry in case someone wants to continue my work. However, not all is lost as my next solution involves playing with gdb-python.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>