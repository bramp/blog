<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opensource on bramp.net</title>
    <link>https://blog.bramp.net</link>
    <description>Recent content in Opensource on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <lastBuildDate>Mon, 20 Feb 2017 12:50:31 -0800</lastBuildDate>
    <atom:link href="https://blog.bramp.net/tags/opensource/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a better “What&#39;s My IP?” site</title>
      <link>https://blog.bramp.net/post/2017/02/20/building-a-better-whats-my-ip-site/</link>
      <pubDate>Mon, 20 Feb 2017 12:50:31 -0800</pubDate>
      
      <guid>https://blog.bramp.net/post/2017/02/20/building-a-better-whats-my-ip-site/</guid>
      <description>

&lt;p&gt;Occasionally I’m curious to know what network my device is using, if it has a IPv6 address, and who owns the address space. For example, when in a coffee shop I’m curious to know their ISP, or when roaming internationally I’m always curious to understand which mobile operator’s IP address gets assigned to device.&lt;/p&gt;

&lt;p&gt;Most &amp;ldquo;&lt;a href=&#34;https://www.google.com/search?q=What’s+my+IP+address&#34;&gt;What’s my IP address&lt;/a&gt;&amp;rdquo; sites, will either only show you one of your IPv4, or IPv6. It won’t do a DNS lookup, and they rarely do a WHOIS lookup.  Doing all these things, shouldn’t be too hard, so I figured in a weekend I could hack together a site to do this.&lt;/p&gt;

&lt;p&gt;This blog post explains the creation of &lt;a href=&#34;http://ip.bramp.net&#34;&gt;ip.bramp.net&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;text-center&#34;&gt;
  &lt;img src=&#34;screenshot.png&#34; alt=&#34;Screenshot of ip.bramp.net in action&#34;&gt;&lt;/img&gt;
&lt;/div&gt;

&lt;h2 id=&#34;how-to-get-both-ipv4-and-ipv6-address&#34;&gt;How to get both IPv4 and IPv6 address?&lt;/h2&gt;

&lt;p&gt;When navigating to a website your browser makes a connection, normally over one of IPv4, or IPv6. Which one is based on the DNS records available for the website’s domain, and the preference of your OS and browser. Thus your web server sees a single incoming connection, with a single remote address. This address is typically stored in a variable named REMOTE_ADDR. Most &amp;ldquo;What’s my IP&amp;rdquo; sites then display this variable back to the user as their IP address. However, as I’d like to see both IPv4 and IPv6 addresses, I need to somehow force the browser to make two requests, one over each.&lt;/p&gt;

&lt;p&gt;There is no API to tell a browser to use IPv6 over IPv4, however, I use a trick with two domain names. Namely, I have ip4.bramp.net, and ip6.bramp.net. Both resolve to the same web server, but the former only has &lt;a href=&#34;https://tools.ietf.org/html/rfc1035&#34;&gt;DNS A records&lt;/a&gt;, and the latter only &lt;a href=&#34;https://tools.ietf.org/html/rfc3596&#34;&gt;DNS AAAA records&lt;/a&gt;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dig ip4.bramp.net
ip4.bramp.net.		&lt;span class=&#34;sc80&#34;&gt;300&lt;/span&gt;	IN	A	&lt;span class=&#34;sc80&#34;&gt;216&lt;/span&gt;.239.32.21

$ dig AAAA ip6.bramp.net
ip6.bramp.net.		&lt;span class=&#34;sc80&#34;&gt;291&lt;/span&gt;	IN	AAAA	&lt;span class=&#34;sc80&#34;&gt;2001&lt;/span&gt;:4860:4802:32::15&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This forces the connection to be over either IPv4, or IPv6. If a browser doesn’t support IPv6, then the connection is never made, and an error is returned. Interesting side note, some browsers uses a technique called &lt;a href=&#34;https://en.wikipedia.org/wiki/Happy_Eyeballs&#34;&gt;Happy Eyeballs&lt;/a&gt;, which tries to connect over both concurrently, but abandons the slower or worse behaving of the two connections.&lt;/p&gt;

&lt;h2 id=&#34;how-do-you-make-two-requests-from-one-page&#34;&gt;How do you make two requests from one page?&lt;/h2&gt;

&lt;p&gt;To force the site to make requests to both of these domains, I issue two &lt;a href=&#34;https://en.wikipedia.org/wiki/Ajax_(programming)&#34;&gt;AJAX&lt;/a&gt; queries. The typical flow looks like:&lt;/p&gt;

&lt;div class=&#34;text-center&#34;&gt;
  &lt;object data=&#34;diagram.svg&#34; type=&#34;image/svg+xml&#34; height=&#34;364&#34; width=&#34;583&#34; alt=&#34;diagram of AJAX calls&#34;&gt;
    &lt;img src=&#34;diagram.png&#34; /&gt;
  &lt;/object&gt;
&lt;/div&gt;

&lt;!--
```
user-&gt;ip.bramp.net: GET /
ip.bramp.net-&gt;user: &lt;html...&gt;
user-&gt;ip4.bramp.net: GET ip4.bramp.net/json
ip4.bramp.net-&gt;user: {address: 1.2.3.4}
user-&gt;ip6.bramp.net: GET ip6.bramp.net/json
ip6.bramp.net-&gt;user: {address: 2001:db8::1}
```
--&gt;

&lt;p&gt;These AJAX queries return a simple JSON object, containing information about the requesting user. In my application an example response may look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span class=&#34;s7e2&#34;&gt;&amp;#34;RemoteAddrFamily&amp;#34;&lt;/span&gt;: &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;IPv6&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s7e2&#34;&gt;&amp;#34;RemoteAddr&amp;#34;&lt;/span&gt;:       &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;2601:646:c200:b466:b446:ff32:b227:a53c&amp;#34;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This response can then be used to update the page, to display the appropriate address.&lt;/p&gt;

&lt;p&gt;An experienced reader may be aware of some security issues with making AJAX request to a different domain. In particular, there are subtle ways in which a malicious site could abuse your AJAX endpoints. This is easily fixed by using cross-origin resource sharing (&lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;CORS&lt;/a&gt;) headers, in particular ip4.bramp.net, and ip6.bramp.net return the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -v ip4.bramp.net/json

&amp;lt; HTTP/1.1 &lt;span class=&#34;sc80&#34;&gt;200&lt;/span&gt; OK
&amp;lt; Content-Type: application/json
&amp;lt; Access-Control-Allow-Origin: http://ip.bramp.net&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The last header, explicitly allows requests from ip.bramp.net only, and thus forbids requests from other sites. Without this header, the AJAX request would be issued, but then rejected by the browser.&lt;/p&gt;

&lt;h2 id=&#34;what-about-the-reverse-dns-and-whois&#34;&gt;What about the reverse DNS and WHOIS?&lt;/h2&gt;

&lt;p&gt;I noted I wanted to display both the reverse DNS, and WHOIS records. This is something the browser doesn’t support, but the server side could. Thus as part of processing the /json AJAX request, the application makes various additional requests to remote DNS and WHOIS servers.&lt;/p&gt;

&lt;p&gt;To reverse lookup a IP address, you need to issue a &lt;a href=&#34;https://tools.ietf.org/html/rfc1035&#34;&gt;PTR DNS request&lt;/a&gt;. This is a special DNS request which requires the IP address to be formatted as a in-addr.arpa or ip6.arpa name. For example, the IP address 1.2.3.4, would become 4.3.2.1.in-addr.arpa. Then when a request is sent for that in-addr.arpa. name, the reverse DNS is returned.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ dig PTR &lt;span class=&#34;sc80&#34;&gt;4&lt;/span&gt;.3.2.1.in-addr.arpa.

&lt;span class=&#34;sc80&#34;&gt;4&lt;/span&gt;.3.2.1.in-addr.arpa.	&lt;span class=&#34;sc80&#34;&gt;74312&lt;/span&gt;	IN	PTR	c-1-2-3-4.example.com.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The in-addr.arpa transformation, and lookup is commonly provided by &lt;a href=&#34;https://linux.die.net/man/3/getaddrinfo&#34;&gt;getaddrinfo(3)&lt;/a&gt; function, which makes this easy to do.&lt;/p&gt;

&lt;p&gt;The WHOIS lookup is a little bit more complex. Each domain is represented by a different WHOIS server, that can be determined by the ccTLD or TLD of the domain. However, with IP addresses, you must identify the Regional Internet Registry (&lt;a href=&#34;https://en.wikipedia.org/wiki/Regional_Internet_registry&#34;&gt;RIR&lt;/a&gt;) that owns the IP space. Sadly there is not a trivial mapping, so instead I issue a WHOIS query to the Internet Assigned Numbers Authority (&lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_Assigned_Numbers_Authority&#34;&gt;IANA&lt;/a&gt;), who replies with the RIR which owns the IP address. From there, I can query the correct registry directly, typically one of &lt;a href=&#34;https://en.wikipedia.org/wiki/AFRINIC&#34;&gt;AFRINIC&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/American_Registry_for_Internet_Numbers&#34;&gt;ARIN&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Asia-Pacific_Network_Information_Centre&#34;&gt;APNIC&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Latin_America_and_Caribbean_Network_Information_Centre&#34;&gt;LACNIC&lt;/a&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/R%C3%A9seaux_IP_Europ%C3%A9ens_Network_Coordination_Centre&#34;&gt;RIPE NCC&lt;/a&gt;. Thus a typical WHOIS request looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ whois -h whois.iana.org &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.2.3.4

% IANA WHOIS server
% &lt;span class=&#34;s3e8&#34;&gt;for&lt;/span&gt; more information on IANA, visit http://www.iana.org
% This query returned &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt; object
refer:        whois.apnic.net
inetnum:      &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.0.0.0 - &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.255.255.255
organisation: APNIC
status:       ALLOCATED
whois:        whois.apnic.net
changed:      &lt;span class=&#34;sc80&#34;&gt;2010&lt;/span&gt;-01
source:       IANA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ whois -h whois.apnic.net &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.2.3.4

% &lt;span class=&#34;sfa0&#34;&gt;[&lt;/span&gt;whois.apnic.net&lt;span class=&#34;sfa0&#34;&gt;]&lt;/span&gt;
% Whois data copyright terms    http://www.apnic.net/db/dbcopyright.html
% Information related to &lt;span class=&#34;sc1c&#34;&gt;&amp;#39;1.2.3.0 - 1.2.3.255&amp;#39;&lt;/span&gt;
inetnum:        &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.2.3.0 - &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.2.3.255
netname:        Example-prefix
descr:          APNIC Example Project

...

% This query was served by the APNIC Whois Service version &lt;span class=&#34;sc80&#34;&gt;1&lt;/span&gt;.69.1-APNICv1r0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Both the reverse DNS and WHOIS response is returned as part of the AJAX JSON response.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span class=&#34;s7e2&#34;&gt;&amp;#34;RemoteAddrFamily&amp;#34;&lt;/span&gt;:  &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;IPv4&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s7e2&#34;&gt;&amp;#34;RemoteAddr&amp;#34;&lt;/span&gt;:        &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;1.2.3.4&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s7e2&#34;&gt;&amp;#34;RemoteAddrReverse&amp;#34;&lt;/span&gt;: &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;c-1-2-3-4.example.com.&amp;#34;&lt;/span&gt;,
  &lt;span class=&#34;s7e2&#34;&gt;&amp;#34;RemoteAddrWhois&amp;#34;&lt;/span&gt;:   &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    % IANA WHOIS server
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    % for more information on IANA, visit http://www.iana.org
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    % This query returned 1 object
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    refer:        whois.apnic.net
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    inetnum:      1.0.0.0 - 1.255.255.255
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    organisation: APNIC
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    status:       ALLOCATED
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;    ...
&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;  &amp;#34;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;what-about-proxies&#34;&gt;What about proxies?&lt;/h2&gt;

&lt;p&gt;Many users are behind proxies, which connects to the webserver on the user’s behalf. Thus the REMOTE_ADDR is the address of the proxy, not the actual user.  Some proxies have a workaround for this, by placing the user’s real IP address in the &lt;a href=&#34;https://en.wikipedia.org/wiki/X-Forwarded-For&#34;&gt;X-Forwarded-For&lt;/a&gt; (XFF), or newer &lt;a href=&#34;https://tools.ietf.org/html/rfc7239&#34;&gt;Forwarded&lt;/a&gt; HTTP header. However, these headers are easily set by the user, so can not be trusted. Thus for the moment I ignore these headers, and will instead display the proxy’s IP address. It is conceivable to create a whitelist of proxies, that I would trust the XFF header, but for now I didn’t want that headache. Especially since the server side issues requests to external hosts, if I trusted the XFF header, an abusive user could use my site as a proxy, or even use my site as a relay to &lt;a href=&#34;https://en.wikipedia.org/wiki/Denial-of-service_attack&#34;&gt;denial of service&lt;/a&gt; these remote servers.&lt;/p&gt;

&lt;h2 id=&#34;tying-this-all-together&#34;&gt;Tying this all together&lt;/h2&gt;

&lt;p&gt;Server side I use &lt;a href=&#34;https://cloud.google.com/appengine/&#34;&gt;App Engine&lt;/a&gt;, and &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. Why? Because I wanted to play with App Engine, and I’m a fan of Go right now. On the client side I use &lt;a href=&#34;http://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt; to make the page look nice, and &lt;a href=&#34;https://angularjs.org&#34;&gt;AngularJS&lt;/a&gt;. AngularJS because I’m familiar with it, and because it is really easy to issue an AJAX requests and transform the result into a web page.&lt;/p&gt;

&lt;p&gt;I like App Engine, because of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Platform_as_a_service&#34;&gt;PaaS&lt;/a&gt; model. It keeps my costs down, and I don’t need to setup a virtual machine, or create docker images. Instead I just write a single binary and upload it. However, App Engine does place some restrictions on what I can do, in particular limiting outbound connections to ones made via its own library. Thus I had to jump through a few hoops to make the reverse DNS and WHOIS requests. Instead of using &lt;a href=&#34;https://linux.die.net/man/3/getaddrinfo&#34;&gt;getaddrinfo(3)&lt;/a&gt;, I had to issue DNS requests myself using App Engine’s socket library and my own UDP packets on port 53. Luckily the Go DNS library, &lt;a href=&#34;https://github.com/miekg/dns&#34;&gt;miekg/dns&lt;/a&gt;, makes this relatively easy.  Similarly I had to implement the WHOIS lookup by hand, but again aided by a library, this time &lt;a href=&#34;https://github.com/domainr/whois&#34;&gt;domainr/whois&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In conclusion, though the use of multiple domain names, some AJAX queries, and server side support. I was able to make &amp;ldquo;(a better) What&amp;rsquo;s My IP Address?&amp;rdquo; site in under a weekend.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/bramp/myip&#34;&gt;full source on github&lt;/a&gt;, or view the site at &lt;a href=&#34;http://ip.bramp.net/&#34;&gt;ip.bramp.net&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Peano Curves</title>
      <link>https://blog.bramp.net/post/2016/08/08/peano-curves/</link>
      <pubDate>Mon, 08 Aug 2016 21:35:35 -0700</pubDate>
      
      <guid>https://blog.bramp.net/post/2016/08/08/peano-curves/</guid>
      <description>&lt;p&gt;My latest addition to the &lt;a href=&#34;https://github.com/google/hilbert&#34;&gt;hilbert go library&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Peano_curve&#34;&gt;Peano Curves&lt;/a&gt;. The original space-filing curve, similar to the Hilbert curve, but a little more complex.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;peano_animation.gif&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Animation of Peano curve with N in the range 1..5&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Introducing Prob.js</title>
      <link>https://blog.bramp.net/post/2016/08/08/introducing-prob.js/</link>
      <pubDate>Mon, 08 Aug 2016 21:33:33 -0700</pubDate>
      
      <guid>https://blog.bramp.net/post/2016/08/08/introducing-prob.js/</guid>
      <description>

&lt;h2 id=&#34;generate-random-numbers-from-different-probability-distributions&#34;&gt;Generate random numbers from different probability distributions&lt;/h2&gt;

&lt;p&gt;There are multiple libraries for generating random numbers from a uniform, and sometimes normal distributions. However,
I needed code to generate them from a expontential or lognormal distribution. I had written code to do this ~10 years ago
in Java, but I needed a more modern Javascript solution.&lt;/p&gt;

&lt;p&gt;Introducing &lt;a href=&#34;https://github.com/bramp/prob.js&#34;&gt;Prob.js&lt;/a&gt;, a javascript library to generate random numbers from different probability distributions. Avaiable via both bower and NPM, prob.js can generate random numbers from the following distrubtions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;Prob.uniform(min, max) &lt;span class=&#34;s1770&#34;&gt;// Uniform distribution in range [min, max).
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;Prob.normal(μ, σ)      &lt;span class=&#34;s1770&#34;&gt;// Normal distribution with mean and standard deviation.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;Prob.exponential(λ)    &lt;span class=&#34;s1770&#34;&gt;// Exponential distribution with lambda.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;Prob.lognormal(μ, σ)   &lt;span class=&#34;s1770&#34;&gt;// Log-normal distribution defined as ln(normal(μ, σ)).
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;Prob.poisson(λ)        &lt;span class=&#34;s1770&#34;&gt;// Poisson distribution returning integers &amp;gt;= 0.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;Prob.zipf(s, N)        &lt;span class=&#34;s1770&#34;&gt;// Zipf&amp;#39;s distribution returning integers in range [1, N].
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;After generating a distribution, the following methods are available&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;With a very simple to use API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;var&lt;/span&gt; r &lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt; Prob.exponential(&lt;span class=&#34;sc80&#34;&gt;1.0&lt;/span&gt;); &lt;span class=&#34;s1770&#34;&gt;// Create a distribution.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;r()        &lt;span class=&#34;s1770&#34;&gt;// Generates a number within the distribution.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;r(src)     &lt;span class=&#34;s1770&#34;&gt;// Generates a number using a `src` of random numbers. (See note below.)
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;r.Min      &lt;span class=&#34;s1770&#34;&gt;// The min random number which could be returned by `r()` (inclusive).
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;r.Max      &lt;span class=&#34;s1770&#34;&gt;// The max random number which could be returned by `r()` (exclusive).
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;r.Mean     &lt;span class=&#34;s1770&#34;&gt;// The expected mean for this distribution.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;r.Variance &lt;span class=&#34;ss4&#34;&gt;// The expected variance for this distribution.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I created a &lt;a href=&#34;https://bramp.github.io/prob.js/&#34;&gt;quick demo site&lt;/a&gt; that generates 1 million random numbers from each distribution in the browser, and plots the PDF as it goes. Same samples:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;normal.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Normal (μ = 0, σ = 1.0)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;lognormal.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Log-normal (μ = 0, σ = 1.0)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;zipf.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Zipf (s = 1, N = 100)&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Hilbert. A Go library to map values onto a Hilbert curve.</title>
      <link>https://blog.bramp.net/post/2015/08/07/introducing-hilbert/</link>
      <pubDate>Fri, 07 Aug 2015 20:53:41 -0700</pubDate>
      
      <guid>https://blog.bramp.net/post/2015/08/07/introducing-hilbert/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Hilbert_curve&#34;&gt;Hilbert curve&lt;/a&gt; is a space-filling (snakey) curve through a 2D space:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;hilbert.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Image of 8 by 8 Hilbert curve&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;This can be very useful for mapping a 1D value, into a 2D space. For example, it is commonly used to &lt;a href=&#34;https://xkcd.com/195/&#34;&gt;map IP addresses into a 2D space&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently created a library for &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; that can map to and from a curve. The project is &lt;a href=&#34;http://github.com/google/hilbert&#34;&gt;hosted on Github&lt;/a&gt;, and can be used like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;s3e8&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#34;github.com/google/hilbert&amp;#34;&lt;/span&gt;

&lt;span class=&#34;s1770&#34;&gt;// Create a Hilbert curve for mapping to and from a 16 by 16 space.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;s, err &lt;span class=&#34;sfa0&#34;&gt;:=&lt;/span&gt; hilbert.New(&lt;span class=&#34;sc80&#34;&gt;16&lt;/span&gt;)

&lt;span class=&#34;s1770&#34;&gt;// Now map one dimension numbers in the range [0, N*N-1], to an x,y
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;// coordinate on the curve where both x and y are in the range [0, N-1].
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;x, y, err &lt;span class=&#34;sfa0&#34;&gt;:=&lt;/span&gt; s.Map(t)

&lt;span class=&#34;s1770&#34;&gt;// Also map back from (x,y) to t.
&lt;/span&gt;&lt;span class=&#34;s1770&#34;&gt;&lt;/span&gt;t, err &lt;span class=&#34;sfa0&#34;&gt;:=&lt;/span&gt; s.MapInverse(x, y)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The project contains some demos, such as this cool animations:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;hilbert_animation.gif&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Hilbert curve animation&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Draw UML Sequence Diagrams with Javascript</title>
      <link>https://blog.bramp.net/post/2013/03/23/draw-uml-sequence-diagrams-with-javascript/</link>
      <pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2013/03/23/draw-uml-sequence-diagrams-with-javascript/</guid>
      <description>&lt;p&gt;I&amp;#8217;m happy to announce one of my projects, &lt;a href=&#34;https://bramp.github.io/js-sequence-diagrams/&#34;&gt;js-sequence-diagrams&lt;/a&gt;. This uses Javascript to draw UML sequence diagrams in SVG format. Here is an example:&lt;/p&gt;

&lt;div class=&#34;text-center&#34;&gt;
    &lt;a href=&#34;https://bramp.github.io/js-sequence-diagrams/&#34;&gt;
        &lt;img src=&#34;sample-with-editor.png&#34; alt=&#34;js-sequence-diagram example&#34; width=&#34;865&#34; height=&#34;333&#34; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;You can alter the diagram in real time, and I even have a simple jQuery plugin to make this easy to use on your own sites.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span class=&#34;s7e2&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;s7d1&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;sequence-diagram-min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&#34;s7e2&#34;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class=&#34;s7e2&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;s7d1&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;sfa0&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;diagram&amp;#34;&lt;/span&gt;&amp;gt;A-&amp;gt;B: Message&amp;lt;/&lt;span class=&#34;s7e2&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span class=&#34;s7e2&#34;&gt;script&lt;/span&gt;&amp;gt;
$(&lt;span class=&#34;sc1c&#34;&gt;&amp;#34;.diagram&amp;#34;&lt;/span&gt;).sequenceDiagram({theme&lt;span class=&#34;sfa0&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sc1c&#34;&gt;&amp;#39;hand&amp;#39;&lt;/span&gt;});
&amp;lt;/&lt;span class=&#34;s7e2&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>