<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ordnance Survey on bramp.net</title>
    <link>https://blog.bramp.net</link>
    <description>Recent content in Ordnance Survey on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <lastBuildDate>Wed, 04 Jun 2008 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.bramp.net/tags/ordnance-survey/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ordnance Survey Easting/Northing to Lat/Long</title>
      <link>https://blog.bramp.net/post/2008/06/04/ordnance-survey-easting/northing-to-lat/long/</link>
      <pubDate>Wed, 04 Jun 2008 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2008/06/04/ordnance-survey-easting/northing-to-lat/long/</guid>
      <description>&lt;p&gt;Recently I had the need to convert Ordnance Survey East/North coordinates to Latitude and Longitude. By using the resources available on the OS site I wrote the following piece of PHP code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;x&#34;&gt;&amp;amp;lt;?php
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;// Converts OS Easting/Northing to Lat/Long
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;// by bramp
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function Marc($bf0, $n, $PHI0, $PHI) {
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    /*
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    Compute meridional arc.
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    Input: - 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;     ellipsoid semi major axis multiplied by central meridian scale factor (bf0) in meters; 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;     n (computed from a, b and f0); 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;     lat of false origin (PHI0) 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;     initial or final latitude of point (PHI) IN RADIANS.
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    */
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $n2 = pow($n, 2);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $n3 = pow($n, 3);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $ans  = ((1 + $n + ((5 / 4) * ($n2)) + ((5 / 4) * $n3)) * ($PHI - $PHI0));
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $ans -= (((3 * $n) + (3 * $n2) + ((21 / 8 ) * $n3)) * (sin($PHI - $PHI0)) * (cos($PHI + $PHI0)));
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $ans += ((((15 / 8 ) * $n2) + ((15 / 8 ) * $n3)) * (sin(2 * ($PHI - $PHI0))) * (cos(2 * ($PHI + $PHI0))));
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $ans -= (((35 / 24) * $n3) * (sin(3 * ($PHI - $PHI0))) * (cos(3 * ($PHI + $PHI0))));
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    return $bf0 * $ans;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function initialLat($North, $n0, $afo, $PHI0, $n, $bfo) {
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    /*
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    Compute initial value for Latitude (PHI) IN RADIANS.
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    Input: - _
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    northing of point (North) and northing of false origin (n0) in meters; 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    semi major axis multiplied by central meridian scale factor (af0) in meters; 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    latitude of false origin (PHI0) IN RADIANS;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    n (computed from a, b and f0) 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    ellipsoid semi major axis multiplied by central meridian scale factor (bf0) in meters.
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    */
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //First PHI value (PHI1)
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $PHI1 = (($North - $n0) / $afo) + $PHI0;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Calculate M
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $M = Marc($bfo, $n, $PHI0, $PHI1);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Calculate new PHI value (PHI2)
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $PHI2 = (($North - $n0 - $M) / $afo) + $PHI1;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Iterate to get final value for InitialLat
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    while ( abs($North - $n0 - $M) &amp;amp;gt; 0.00001 ) {
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;        $PHI2 = (($North - $n0 - $M) / $afo) + $PHI1;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;        $M = Marc($bfo, $n, $PHI0, $PHI2);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;        $PHI1 = $PHI2;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    }
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    return $PHI2;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;function E_N_to_Lat_Long($East, $North) {
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $a  = 6377563.396; // Semi-major axis, a
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $b  = 6356256.910; //Semi-minor axis, b
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $e0 = 400000.000; //True origin Easting, E0 
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $n0 = -100000.000; //True origin Northing, N0   
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $f0 = 0.999601271700; //Central Meridan Scale, F0
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $PHI0 = 49.0; // True origin latitude, j0
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $LAM0 = -2.0; // True origin longitude, l0
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Convert angle measures to radians
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $RadPHI0 = $PHI0 * (M_PI / 180);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $RadLAM0 = $LAM0 * (M_PI / 180);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Compute af0, bf0, e squared (e2), n and Et
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $af0 = $a * $f0;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $bf0 = $b * $f0;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $e2 = ($af0*$af0 - $bf0*$bf0 ) / ($af0*$af0);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $n = ($af0 - $bf0) / ($af0 + $bf0);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $Et = $East - $e0;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Compute initial value for latitude (PHI) in radians
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $PHId = InitialLat($North, $n0, $af0, $RadPHI0, $n, $bf0);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $sinPHId2 = pow(sin($PHId),  2);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $cosPHId  = pow(cos($PHId), -1);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $tanPHId  = tan($PHId);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $tanPHId2 = pow($tanPHId, 2);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $tanPHId4 = pow($tanPHId, 4);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $tanPHId6 = pow($tanPHId, 6);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Compute nu, rho and eta2 using value for PHId
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $nu = $af0 / (sqrt(1 - ($e2 * $sinPHId2)));
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $rho = ($nu * (1 - $e2)) / (1 - $e2 * $sinPHId2);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $eta2 = ($nu / $rho) - 1;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    //Compute Longitude
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $X    = $cosPHId / $nu;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $XI   = $cosPHId / (   6 * pow($nu, 3)) * (($nu / $rho)         +  2 * $tanPHId2);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $XII  = $cosPHId / ( 120 * pow($nu, 5)) * (5  + 28 * $tanPHId2  + 24 * $tanPHId4);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $XIIA = $cosPHId / (5040 * pow($nu, 7)) * (61 + 662 * $tanPHId2 + 1320 * $tanPHId4 + 720 * $tanPHId6);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $VII  = $tanPHId / (  2 * $rho * $nu);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $VIII = $tanPHId / ( 24 * $rho * pow($nu, 3)) * ( 5 +  3 * $tanPHId2 + $eta2 - 9 * $eta2 * $tanPHId2 );
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $IX   = $tanPHId / (720 * $rho * pow($nu, 5)) * (61 + 90 * $tanPHId2 + 45 * $tanPHId4 );
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $long = (180 / M_PI) * ($RadLAM0 + ($Et * $X) - pow($Et,3) * $XI + pow($Et,5) * $XII - pow($Et,7) * $XIIA);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    $lat  = (180 / M_PI) * ($PHId - (pow($Et,2) * $VII) + (pow($Et, 4) * $VIII) - (pow($Et, 6) * $IX));
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;    return array($lat, $long);
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;}
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;?&amp;amp;gt;;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;it is used in the following way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span class=&#34;x&#34;&gt;$e = 349000;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$n = 461000;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;print_r( E_N_to_Lat_Long( $e, $n) );
&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you find a need to use this please place a link back to my site. thanks&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>