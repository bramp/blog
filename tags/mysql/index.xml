<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on bramp.net</title>
    <link>http://bramp.net/blog/tags/mysql/</link>
    <description>Recent content in Mysql on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 30 Sep 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bramp.net/blog/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pt-kill CentOS init.d script</title>
      <link>http://bramp.net/blog/2012/09/30/pt-kill-centos-init.d-script/</link>
      <pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2012/09/30/pt-kill-centos-init.d-script/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.percona.com/doc/percona-toolkit/2.1/pt-kill.html&#34;&gt;pt-kill&lt;/a&gt; is a neat little application that can stop long running MySQL queries. It was formally know as &lt;a href=&#34;http://www.maatkit.org/doc/mk-kill.html&#34;&gt;mk-kill&lt;/a&gt; before &lt;a href=&#34;http://www.Percona.com&#34;&gt;Percona&lt;/a&gt; took over the project. Here is the init.d script I use (as one doesn&amp;#8217;t seem provided by the project):&lt;/p&gt;

&lt;pre&gt;#!/bin/sh
#
# pt-kill   This shell script takes care of starting and stopping
#               the pt-kill services.
#
# chkconfig: - 60 20
# description: pt-kill stops long running MySQL queries
#
# probe: true

# Source function library.
. /etc/rc.d/init.d/functions

RETVAL=0

# See how we were called.
case &#34;$1&#34; in
  start)
    echo -n $&#34;Starting pt-kill: &#34;
 
    pt-kill \
      --pid /var/run/pt-kill.pid \
      --daemonize \
      --interval 5 \
      --busy-time 60 \
      --wait-after-kill 15  \
      --ignore-info &#39;(?i-smx:^insert|^update|^delete|^load)&#39; \
      --match-info &#39;(?i-xsm:select)&#39; \
      --ignore-user &#39;(?i-xsm:root)&#39; \
      --log /var/log/mysql-kill.log \
      --print \
      --execute-command &#39;(echo &#34;Subject: pt-kill query found on `hostname`&#34;; tail -1 /var/log/mysql-kill.log)|/usr/sbin/sendmail -t you@example.com&#39; \
      --kill-query
 
    RETVAL=$?
    echo
    [ $RETVAL -ne 0 ] &amp;#038;&amp;#038; exit $RETVAL
 
  ;;
  stop)
        # Stop daemons.
        echo -n $&#34;Shutting down pt-kill: &#34;
        killproc pt-kill
        echo
    ;;
  restart)
    $0 stop
        $0 start
        ;;
  *)
        echo $&#34;Usage: pt-kill {start|stop}&#34;
        RETVAL=3
        ;;
esac
 
exit $RETVAL

&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create the script as /etc/init.d/pt-kill, and change the pt-kill command in the middle of the script to suit your needs. Then run &amp;#8216;chkconfig &amp;#8211;level 345 pt-kill on&amp;#8217; to ensure this script starts up at boot. Alternatively test the script with &amp;#8216;/etc/init.d/pt-kill start&amp;#8217; or &amp;#8216;/etc/init.d/pt-kill stop&amp;#8217;.&lt;/p&gt;

&lt;p&gt;Thanks to [MySQL Diary][4] as they provided their default pt-kill command line. Perhaps in future someone could create a more generic startup script.&lt;/p&gt;

&lt;p&gt;[4]: &lt;a href=&#34;http://www.mysqldiary.com/you-must-have-a-killer-in-your-system/&#34;&gt;http://www.mysqldiary.com/you-must-have-a-killer-in-your-system/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQLSTATE[HY000]: General error: 2053</title>
      <link>http://bramp.net/blog/2011/10/25/sqlstatehy000-general-error-2053/</link>
      <pubDate>Tue, 25 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bramp.net/blog/2011/10/25/sqlstatehy000-general-error-2053/</guid>
      <description>&lt;p&gt;I encountered the following odd exception:&lt;/p&gt;

&lt;pre&gt;PHP Fatal error:  Uncaught exception &#39;PDOException&#39; with message &#39;SQLSTATE[HY000]: General error: 2053 &#39; in /home/bramp/my.php:29
Stack trace:
#0 /home/bramp/my.php(29): PDOStatement-&gt;fetch(2)
&lt;/pre&gt;

&lt;p&gt;Searching on Google didn&amp;#8217;t reveal much help, but I eventually figure out the root cause. Spot the mistake:&lt;/p&gt;

&lt;pre&gt;...
$sql = &#39;SELECT TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME FROM QRTZ_TRIGGERS&#39;;
$sth = $dbh-&gt;prepare($sql) or die(&#39;Failed to prepare SELECT TRIGGER query&#39;);
while ($row = $sth-&gt;fetch(PDO::FETCH_ASSOC)) {
...
&lt;/pre&gt;

&lt;p&gt;I am missing a&lt;/p&gt;

&lt;pre&gt;$sth-&gt;execute();&lt;/pre&gt;

&lt;p&gt;in between the prepare and the fetch. Easy fix. For reference I&amp;#8217;m using a old version of PHP 5.1.6, and MySQL client 5.0.45.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>