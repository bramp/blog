<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vmware on bramp.net</title>
    <link>https://blog.bramp.net/tags/vmware/</link>
    <description>Recent content in Vmware on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <lastBuildDate>Fri, 19 Mar 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.bramp.net/tags/vmware/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>VMWare breaks shift key</title>
      <link>https://blog.bramp.net/post/2010/03/19/vmware-breaks-shift-key/</link>
      <pubDate>Fri, 19 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2010/03/19/vmware-breaks-shift-key/</guid>
      <description>&lt;p&gt;I came into my office today to find that my keyboard would no longer type capital letters. The shift, caps lock, and even num lock keys seemed to be broken. After a quick WTF &lt;a href=&#34;http://www.evolution-systems.co.uk/blogs/matt/view_post&amp;amp;id=37/&#34;&gt;it was pointed out to me&lt;/a&gt; that VMWare occasionally does this to Linux machines. Thanks to &lt;a href=&#34;http://twitter.com/bigkebabman&#34;&gt;Matt&lt;/a&gt; who showed me a quick solution. In a terminal just type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;setxkbmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And everything should be back to normal. After using VMWare on Linux for a couple of years I&amp;#8217;ve never encountered this problem!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>linuxoffsets for FreeBSD</title>
      <link>https://blog.bramp.net/post/2009/01/11/linuxoffsets-for-freebsd/</link>
      <pubDate>Sun, 11 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2009/01/11/linuxoffsets-for-freebsd/</guid>
      <description>&lt;p&gt;VMWare 6 and above has this neat debugging functionality where you can attach gdb running on a host, to a guest running inside VMWare. This allows you to debug a running kernel, or on linux running processes.&lt;/p&gt;

&lt;p&gt;However, VMWare seems to have coded a bit of a hack to allow gdb to understand what process/threads are inside the virtual machine. Now this hack involves using something called linuxoffsets, which provides the offset for certain fields in a linux kernel struct.&lt;/p&gt;

&lt;p&gt;So I thought I could abuse these offsets, and hopefully make them work for FreeBSD. The Linux offsets are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Linux Values&lt;/th&gt;
&lt;th&gt;FreeBSD 7.1 Values&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;version&amp;gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Version number of linux kernel, ie 0x020609 (2.6.9)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;mm&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;mm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;next_task&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;next_task (linux &amp;lt; 2.4.15)&lt;/td&gt;
&lt;td&gt;struct proc-&amp;gt;p_list-&amp;gt;le_next&lt;/td&gt;
&lt;td&gt;Pointer to next task struct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;tasks&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;tasks (linux &amp;gt;= 2.4.15)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Pointers to prev and next task struct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;comm&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;comm&lt;/td&gt;
&lt;td&gt;struct proc-&amp;gt;p_comm&lt;/td&gt;
&lt;td&gt;executable name&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;pid&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;pid&lt;/td&gt;
&lt;td&gt;struct proc-&amp;gt;p_pid&lt;/td&gt;
&lt;td&gt;pid of the process&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;thread&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;thread&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;pgd&amp;gt;&lt;/td&gt;
&lt;td&gt;mm_struct-&amp;gt;pgd&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;rsp0/esp0&amp;gt;&lt;/td&gt;
&lt;td&gt;thread_struct-&amp;gt;rsp0 (or thread_struct-&amp;gt;esp0 32bit)&lt;/td&gt;
&lt;td&gt;struct thread-&amp;gt;td_sigstk-&amp;gt;ss_sp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;fs&amp;gt;&lt;/td&gt;
&lt;td&gt;thread_struct-&amp;gt;fs&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;threadsize&amp;gt;&lt;/td&gt;
&lt;td&gt;0x2000 or sizeof(union thread_union-&amp;gt;stack) (linux &amp;gt;= 2.6)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;grouplead&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;group_leader (linux &amp;gt;= 2.6.11)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;threadgroup&amp;gt;&lt;/td&gt;
&lt;td&gt;task_struct-&amp;gt;thread_group (linux &amp;gt;= 2.6.11)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;commsize&amp;gt;&lt;/td&gt;
&lt;td&gt;sizeof(struct task_struct-&amp;gt;comm)&lt;/td&gt;
&lt;td&gt;sizeof(struct proc-&amp;gt;p_comm)&lt;/td&gt;
&lt;td&gt;executable nameâ€™s max len&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, after some time I feel this isn&amp;#8217;t going to be possible. Each value represents a offset into a Linux task_struct struct, however, nothing represents the location of the first task_struct in RAM. I suspect VMWare is figuring out the location via some other means. Since FreeBSD doesn&amp;#8217;t have a task_struct it most likely won&amp;#8217;t be able to find what it needs.&lt;/p&gt;

&lt;p&gt;Regardless I&amp;#8217;ve posted this entry in case someone wants to continue my work. However, not all is lost as my next solution involves playing with gdb-python.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>