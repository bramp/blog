<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>e4200v2 on bramp.net</title>
    <link>https://blog.bramp.net</link>
    <description>Recent content in e4200v2 on bramp.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_GB</language>
    <lastBuildDate>Tue, 24 Jan 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.bramp.net/tags/e4200v2/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hacking Linksys E4200v2 firmware</title>
      <link>https://blog.bramp.net/post/2012/01/24/hacking-linksys-e4200v2-firmware/</link>
      <pubDate>Tue, 24 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.bramp.net/post/2012/01/24/hacking-linksys-e4200v2-firmware/</guid>
      <description>&lt;p&gt;In a previous post I &lt;a href=&#34;https://blog.bramp.net/post/2012/01/22/obtaining-the-firmware-for-linksys-e4200v2/&#34;&gt;obtained the Linksys E4200v2 firmware&lt;/a&gt;, now I plan to break it apart and see what I can find.&lt;/p&gt;
&lt;p&gt;I start off by simplying using “file” on the firmware:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ file FW_E4200_2.0.36.126507.SSA 

FW_E4200_2.0.36.126507.SSA: u-boot legacy uImage, Linux-2.6.35.8, Linux/ARM, OS Kernel Image &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Not compressed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;2677476&lt;/span&gt; bytes, Thu Dec &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 19:40:21 2011, Load Address: 0x00008000, Entry Point: 0x00008000, Header CRC: 0x6ADD9801, Data CRC: 0xB010442D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well this is a great start. We know we are dealing with Linux, and that this is a normal uImage. I then move on to use a neat little tool called &lt;a href=&#34;https://github.com/devttys0/binwalk&#34;&gt;binwalk&lt;/a&gt;. By using libmagic, binwalk tries to find interesting sections of the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ /usr/local/bin/binwalk FW_E4200_2.0.36.126507.SSA 

DECIMAL   	HEX       	DESCRIPTION
-------------------------------------------------------------------------------------------------------
&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         	0x0       	uImage header, header size: &lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; bytes, header CRC: 0x6ADD9801, created: Thu Dec &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 19:40:21 2011, image size: &lt;span class=&#34;m&#34;&gt;2677476&lt;/span&gt; bytes, Data Address: 0x8000, Entry Point: 0x8000, data CRC: 0xB010442D, OS: Linux, CPU: ARM, image type: OS Kernel Image, compression type: none, image name: Linux-2.6.35.8
&lt;span class=&#34;m&#34;&gt;1124&lt;/span&gt;      	0x464     	LZMA compressed data, properties: 0x87, dictionary size: &lt;span class=&#34;m&#34;&gt;250216448&lt;/span&gt; bytes, uncompressed size: &lt;span class=&#34;m&#34;&gt;14786800&lt;/span&gt; bytes
&lt;span class=&#34;m&#34;&gt;16636&lt;/span&gt;     	0x40FC    	gzip compressed data, from Unix, last modified: Thu Dec &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; 19:40:18 2011, max compression
&lt;span class=&#34;m&#34;&gt;2752512&lt;/span&gt;   	0x2A0000  	JFFS2 filesystem data little endian, JFFS node length: &lt;span class=&#34;m&#34;&gt;49&lt;/span&gt;
..A whole lot of JFFS2 sections..
&lt;span class=&#34;m&#34;&gt;20974612&lt;/span&gt;  	0x1400C14 	JFFS2 filesystem data little endian, JFFS node length: &lt;span class=&#34;m&#34;&gt;51&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;20974664&lt;/span&gt;  	0x1400C48 	JFFS2 filesystem data little endian, JFFS node length: &lt;span class=&#34;m&#34;&gt;193&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We find a small LZMA section, and large gzip section, and lots of JFFS2 sections. JFFS2 is a popular embedded file system, so we can guess the bulk of the file system is here. Next we can extract each section using dd:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1124&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15512&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FW_E4200_2.0.36.126507.SSA &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-1.lzma
dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16636&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2735876&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FW_E4200_2.0.36.126507.SSA &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-2.gz
dd &lt;span class=&#34;nv&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2752512&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FW_E4200_2.0.36.126507.SSA &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-3.jffs2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we are using a block size of 1 (so we can count in bytes), and we skip the offset into the file. Then we manually work out the sizes for the lzma and gzip sections. They can be no larger than their start until the next section. If they don’t fill that full space, then not to worry as these tools will normally ignore trailing data.&lt;/p&gt;
&lt;p&gt;As I’m interested to see what’s in the JFFS filesystem, we should mount it. You can’t mount JFFS like a normal loopback device, you have to create a fake flash device. The following set of command can solve that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo modprobe mtdram &lt;span class=&#34;nv&#34;&gt;total_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;32768&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;erase_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt;
sudo modprobe mtdblock
sudo modprobe mtdchar
&lt;span class=&#34;c1&#34;&gt;# sudo mknod /dev/mtdblock0 b 31 0&lt;/span&gt;
dd &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;image-3.jffs2 &lt;span class=&#34;nv&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/dev/mtdblock0
mount -t jffs2 /dev/mtdblock0 /mnt/disk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The mknod line is only needed if you don’t already have a /dev/mtdblock0. Also a /mnt/disk needs to be created ahead of time so the mounting works. Anyway once that was done, I cd /mnt/disk and found that it does appear to contain most of the file system. There are all the HTML pages, and binaries (for example busybox).&lt;/p&gt;
&lt;p&gt;Now we should go back to image-1.lzma and image-2.gz. Well straight away trying to decompress image-1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ lzma -dc image-1.lzma &amp;gt; image-1
lzma: Decoder error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;results in a error. So we can assume that was a incorrectly detected by binwalk. Lets now try and decompress image-2.gz:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gzip -dc image-2.gz &amp;gt; image-2
gzip: image-2.gz: decompression OK, trailing garbage ignored
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So that does indeed produce a large image-2 file, so we can ignore the trailing garbage warning. A quick “file” on image-2 doesn’t reveal anything useful, so I run binwalk on it. This turns up a set of false positives. So I take a different approach. I run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ strings image-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This produces a whole host of valid looking strings. From the contents of the strings it makes me think it’s the actual kernel. A line like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Linux version 2.6.35.8 (root@ubuntu) (gcc version 4.2.0 20070413 (prerelease) (CodeSourcery Sourcery G++ Lite 2007q1-21)) #1 Thu Dec 22 16:40:10 PST 2011
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;helps me come to that conclusion.&lt;/p&gt;
&lt;p&gt;I haven’t finished poking around image-2.gz, but I suspect the interesting parts are mostly in the JFFS2 filesystem. Hopefully this will lead to me getting ssh access to the router, and eventually being able to customise the firmware.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>